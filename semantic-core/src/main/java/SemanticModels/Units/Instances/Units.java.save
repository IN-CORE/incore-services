package SemanticModels.Units.Instances;

import SemanticModels.Units.*;
import SemanticModels.Units.UnitTypes.*;
import SemanticModels.Units.UnitTypes.Derived.PowerDerivedUnit;
import SemanticModels.Units.UnitTypes.Derived.ReciprocalDerivedUnit;
import SemanticModels.Units.UnitTypes.Derived.DivisionDerivedUnit;
import SemanticModels.Units.UnitTypes.Derived.ProductDerivedUnit;
import SemanticModels.Units.PhysicalQuantities.PhysicalQuantity;
import SemanticModels.Units.UnitTypes.Unit;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class Units {
    // static list of all units
    public static final List<Unit> SIBaseUnits = new ArrayList<>();

    private Units() { }

    static {

    }

    public static final class Imperial {
        // Length
        public static final NamedUnit thou = new NamedUnit("thou", "thou", "th", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit inch = new NamedUnit("inch", "inches", "in", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit foot = new NamedUnit("foot", "feet", "ft", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit yard = new NamedUnit("yard", "yards", "yd", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit chain = new NamedUnit("chain", "chains", "ch", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit furlong = new NamedUnit("furlong", "furlongs", "fur", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit mile = new NamedUnit("mile", "miles", "ml", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit league = new NamedUnit("league", "leagues", "lea", PhysicalQuantity.Length, UnitSystem.Imperial);

        // Length - Maritime
        public static final NamedUnit fathom = new NamedUnit("fathom", "fathoms", "ftm", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit cable = new NamedUnit("cable", "cables", PhysicalQuantity.Length, UnitSystem.Imperial);
        public static final NamedUnit nauticalMile = new NamedUnit("nautical mile", "nautical miles", PhysicalQuantity.Length, UnitSystem.Imperial);

        // Area
        public static final NamedUnit perch = new NamedUnit("perch", "perches", PhysicalQuantity.Area, UnitSystem.Imperial);
        public static final NamedUnit rood = new NamedUnit("rood", "roods", PhysicalQuantity.Area, UnitSystem.Imperial);
        public static final NamedUnit acre = new NamedUnit("acre", "acres", PhysicalQuantity.Area, UnitSystem.Imperial);

        // Volume
        public static final NamedUnit fluidOunce = new NamedUnit("fluid ounce", "fluid ounces", "fl oz", PhysicalQuantity.Volume, UnitSystem.Imperial);
        public static final NamedUnit gill = new NamedUnit("gill", "gills", "gi", PhysicalQuantity.Volume, UnitSystem.Imperial);
        public static final NamedUnit pint = new NamedUnit("pint", "pints", "pt", PhysicalQuantity.Volume, UnitSystem.Imperial);
        public static final NamedUnit quart = new NamedUnit("quart", "quarts", "qt", PhysicalQuantity.Volume, UnitSystem.Imperial);
        public static final NamedUnit gallon = new NamedUnit("gallon", "gallons", "gal", PhysicalQuantity.Volume, UnitSystem.Imperial);

        // Mass
        public static final NamedUnit grain = new NamedUnit("grain", "grains", "gr", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit drachm = new NamedUnit("drachm", "drachms", "dr", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit ounce = new NamedUnit("ounce", "ounces", "oz", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit pound = new NamedUnit("pound", "pounds", "lb", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit stone = new NamedUnit("stone", "stone", "st", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit quarter = new NamedUnit("quarter", "quarters", "quarter", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit hundredweight = new NamedUnit("hundredweight", "hundredweights", "cwt", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit ton = new NamedUnit("ton", "tons", "t", PhysicalQuantity.Mass, UnitSystem.Imperial);
        public static final NamedUnit slug = new NamedUnit("slug", "slugs", "slug", PhysicalQuantity.Mass, UnitSystem.Imperial);

        static {

        }
    }

    public static final class USCustomary {
        // Length - International
        public static final NamedUnit point = new NamedUnit("point", "points", "p", "p",
                                                      PhysicalQuantity.Length, UnitSystem.USCustomary);

        public static final NamedUnit pica = new NamedUnit("pica", "picas", "P", "P",
                                                     PhysicalQuantity.Length, UnitSystem.USCustomary);

        // Length - US Survey
        public static final NamedUnit link = new NamedUnit("link", "links", "li", "li",
                                                     PhysicalQuantity.Length, UnitSystem.USCustomary);

        public static final NamedUnit surveyFoot = new NamedUnit("survey foot", "survey feet", "ft", "ft",
                                                           PhysicalQuantity.Length, UnitSystem.USCustomary);

        public static final NamedUnit rod = new NamedUnit("rod", "rods", "rd", "rd",
                                                    PhysicalQuantity.Length, UnitSystem.USCustomary);

        public static final NamedUnit surveyMile = new NamedUnit("survey mile", "survey miles", "mi", "mi",
                                                           PhysicalQuantity.Length, UnitSystem.USCustomary);

        // Area
        public static final NamedUnit section = new NamedUnit("section", "section", PhysicalQuantity.Area, UnitSystem.USCustomary);
        public static final NamedUnit surveyTownship = new NamedUnit("survey township", "survey townships", PhysicalQuantity.Area, UnitSystem.USCustomary);

        public static final ProductDerivedUnit squareFoot = new ProductDerivedUnit(Imperial.foot, Imperial.foot, PhysicalQuantity.Area);
        public static final ProductDerivedUnit squareChain = new ProductDerivedUnit(Imperial.chain, Imperial.chain, PhysicalQuantity.Area);

        // Volume
        public static final PowerDerivedUnit cubicInch = new PowerDerivedUnit(Imperial.inch, 3, PhysicalQuantity.Volume);
        public static final PowerDerivedUnit cubicFoot = new PowerDerivedUnit(Imperial.foot, 3, PhysicalQuantity.Volume);
        public static final PowerDerivedUnit cubicYard = new PowerDerivedUnit(Imperial.yard, 3, PhysicalQuantity.Volume);

        // Fluid Volume
        public static final NamedUnit minim = new NamedUnit("minim", "minims", "min", "min", PhysicalQuantity.Volume, UnitSystem.USCustomary);

        public static final NamedUnit fluidDram = new NamedUnit("fluid dram", "fluid drams", "fl dr", "fl dr",
                                                          PhysicalQuantity.Volume, UnitSystem.USCustomary);

        public static final NamedUnit teaspoon = new NamedUnit("teaspoon", "teaspoons", "tsp", "tsp",
                                                         PhysicalQuantity.Volume, UnitSystem.USCustomary);

        public static final NamedUnit tablespoon = new NamedUnit("tablespoon", "tablespoons", "Tbsp", "Tbsp",
                                                           PhysicalQuantity.Volume, UnitSystem.USCustomary);

        public static final NamedUnit fluidOunce = new NamedUnit("fluid ounce", "fluid ounces", "fl oz", "fl oz",
                                                           PhysicalQuantity.Volume, UnitSystem.USCustomary);

        public static final NamedUnit shot = new NamedUnit("shot", "shots", "jig", "jig", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit gill = new NamedUnit("gill", "gills", "gi", "gi", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit cup = new NamedUnit("cup", "cups", "cp", "cp", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit liquidPint = new NamedUnit("pint", "pints", "pt", "pt", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit liquidQuart = new NamedUnit("quart", "quarts", "qt", "qt", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit liquidGallon = new NamedUnit("gallon", "gallons", "gal", "gal", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit liquidBarrel = new NamedUnit("barrel", "barrels", "bbl", "bbl", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit oilBarrel = new NamedUnit("oil barrel", "oil barrels", "bbl", "bll", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit hogshead = new NamedUnit("hogshead", "hogshead", PhysicalQuantity.Volume, UnitSystem.USCustomary);

        // Dry Volume
        public static final NamedUnit dryPint = new NamedUnit("pint", "pints", "pt", "pt", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit dryQuart = new NamedUnit("quart", "quarts", "qt", "qt", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit dryGallon = new NamedUnit("gallon", "gallons", "gal", "gal", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit peck = new NamedUnit("peck", "pecks", "pk", "pk", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit bushel = new NamedUnit("bushel", "bushels", "bu", "bu", PhysicalQuantity.Volume, UnitSystem.USCustomary);
        public static final NamedUnit dryBarrel = new NamedUnit("barrel", "barrels", "bbl", "bbl", PhysicalQuantity.Volume, UnitSystem.USCustomary);

        // Mass
        public static final NamedUnit pennyweight = new NamedUnit("pennyweight", "pennyweights", "dwt", "dwt",
                                                            PhysicalQuantity.Mass, UnitSystem.USCustomary);

        public static final NamedUnit troyOunce = new NamedUnit("troy ounce", "troy ounces", "oz t", "oz t", PhysicalQuantity.Mass, UnitSystem.USCustomary);
        public static final NamedUnit troyPound = new NamedUnit("troy pound", "troy pounds", "lb t", "lb t", PhysicalQuantity.Mass, UnitSystem.USCustomary);

        static {

        }
    }

    public static final class SIBase {
        public static final PrefixableUnit metre = new PrefixableUnit("metre", "metres", "m",
                                                                PhysicalQuantity.Length, UnitSystem.SI);

        public static final PrefixableUnit gram = new PrefixableUnit("gram", "grams", "g",
                                                               PhysicalQuantity.Mass, UnitSystem.SI);

        public static final PrefixedUnit kilogram = new PrefixedUnit(SIPrefix.kilo, gram);

        public static final PrefixableUnit second = new PrefixableUnit("second", "seconds", "s",
                                                                 PhysicalQuantity.Time, UnitSystem.SI);

        public static final PrefixableUnit ampere = new PrefixableUnit("ampere", "amperes", "A",
                                                                 PhysicalQuantity.ElectricCurrent, UnitSystem.SI);

        public static final PrefixableUnit kelvin = new PrefixableUnit("kelvin", "kelvin", "K",
                                                                 PhysicalQuantity.Temperature, UnitSystem.SI);

        public static final PrefixableUnit mole = new PrefixableUnit("mole", "moles", "mol",
                                                               PhysicalQuantity.AmountOfSubstance, UnitSystem.SI);

        public static final PrefixableUnit candela = new PrefixableUnit("candela", "candela", "cd",
                                                                  PhysicalQuantity.LuminousIntensity, UnitSystem.SI);
    }

    public static final class SINamedDerived {
        public static final NamedDerivedUnit hertz = new NamedDerivedUnit("hertz", "hertz", "Hz", "Hz",
                                                                    PhysicalQuantity.Frequency,
                                                                    new ReciprocalDerivedUnit(SIBase.second));

        public static final NamedDerivedUnit radian = new NamedDerivedUnit("radian", "radians", "rad", "rad",
                                                                     PhysicalQuantity.Frequency,
                                                                     new DivisionDerivedUnit(SIBase.metre, SIBase.metre));

        public static final NamedDerivedUnit steradian = new NamedDerivedUnit("steradian", "steradians", "sr", "sr",
                                                                        PhysicalQuantity.SolidAngle,
                                                                        new DivisionDerivedUnit(SIDerived.squareMetre,
                                                                                                SIDerived.squareMetre));

        public static final NamedDerivedUnit newton = new NamedDerivedUnit("newton", "newtons", "N", "N",
                                                                     PhysicalQuantity.Force,
                                                                     new ProductDerivedUnit(SIBase.kilogram,
                                                                                            SIDerived.metrePerSecondSquared));

        public static final NamedDerivedUnit pascal = new NamedDerivedUnit("pascal", "pascals", "Pa", "Pa",
                                                                     PhysicalQuantity.Pressure,
                                                                     new DivisionDerivedUnit(newton, SIDerived.squareMetre));

        public static final NamedDerivedUnit joule = new NamedDerivedUnit("joule", "joules", "J", "J",
                                                                    PhysicalQuantity.Energy,
                                                                    new ProductDerivedUnit(newton, SIBase.metre));

        public static final NamedDerivedUnit watt = new NamedDerivedUnit("watt", "watts", "W", "W",
                                                                   PhysicalQuantity.Power,
                                                                   new DivisionDerivedUnit(joule, SIBase.second));

        public static final NamedDerivedUnit coulomb = new NamedDerivedUnit("coulomb", "coulombs", "C", "C",
                                                                      PhysicalQuantity.ElectricCharge,
                                                                      new ProductDerivedUnit(SIBase.second, SIBase.ampere));

        public static final NamedDerivedUnit volt = new NamedDerivedUnit("volt", "volts", "V", "V",
                                                                   PhysicalQuantity.ElectricalPotentialDifference,
                                                                   new DivisionDerivedUnit(joule, coulomb));

        public static final NamedDerivedUnit farad = new NamedDerivedUnit("farad", "fards", "F", "F",
                                                                    PhysicalQuantity.ElectricalCapacitance,
                                                                    new DivisionDerivedUnit(coulomb, volt));

        public static final NamedDerivedUnit ohm = new NamedDerivedUnit("ohm", "ohms", "ohms", "\u03c9",
                                                                  PhysicalQuantity.ElectricalResistance,
                                                                  new DivisionDerivedUnit(volt, SIBase.ampere));

        public static final NamedDerivedUnit siemens = new NamedDerivedUnit("siemens", "siemens", "S", "S",
                                                                      PhysicalQuantity.ElectricalConductance,
                                                                      new DivisionDerivedUnit(SIBase.ampere, volt));

        public static final NamedDerivedUnit weber = new NamedDerivedUnit("weber", "webers", "Wb", "Wb",
                                                                    PhysicalQuantity.MagneticFlux,
                                                                    new DivisionDerivedUnit(joule, SIBase.ampere));

        public static final NamedDerivedUnit tesla = new NamedDerivedUnit("tesla", "teslas", "T", "T",
                                                                    PhysicalQuantity.MagneticFluxDensity,
                                                                    new DivisionDerivedUnit(weber, SIDerived.squareMetre));

        public static final NamedDerivedUnit henry = new NamedDerivedUnit("henry", "henries", "H", "H",
                                                                    PhysicalQuantity.ElectricalInductance,
                                                                    new DivisionDerivedUnit(weber, SIBase.ampere));

        public static final NamedDerivedUnit lumen = new NamedDerivedUnit("lumen", "lumens", "lm", "lm",
                                                                    PhysicalQuantity.LuminousFlux,
                                                                    new ProductDerivedUnit(SIBase.candela, steradian));

        public static final NamedDerivedUnit lux = new NamedDerivedUnit("lux", "lux", "lx", "lx",
                                                                  PhysicalQuantity.Illuminance,
                                                                  new DivisionDerivedUnit(lumen, SIDerived.squareMetre));

        public static final NamedDerivedUnit becquerel = new NamedDerivedUnit("becquerel", "becquerel", "Bq", "Bq",
                                                                        PhysicalQuantity.RadioActivity,
                                                                        new ReciprocalDerivedUnit(SIBase.second));

        public static final NamedDerivedUnit gray = new NamedDerivedUnit("gray", "grays", "Gy", "Gy",
                                                                   PhysicalQuantity.AbsorbedDose,
                                                                   new DivisionDerivedUnit(joule, SIBase.kilogram));

        public static final NamedDerivedUnit sievert = new NamedDerivedUnit("sievert", "sieverts", "Sv", "Sv",
                                                                      PhysicalQuantity.EquivalentDose,
                                                                      new DivisionDerivedUnit(joule, SIBase.kilogram));

        public static final NamedDerivedUnit katal = new NamedDerivedUnit("katal", "katals", "kat", "kat",
                                                                    PhysicalQuantity.CatalyticActivity,
                                                                    new DivisionDerivedUnit(SIBase.mole, SIBase.second));

        static {

        }
    }

    // NOTE: UnitSystem will be inferred as SI
    public static final class SIDerived {
        public static final PowerDerivedUnit squareSecond = new PowerDerivedUnit(SIBase.second, 2);

        public static final PowerDerivedUnit cubicSecond = new PowerDerivedUnit(SIBase.second, 3);

        public static final PowerDerivedUnit quarticSecond = new PowerDerivedUnit(SIBase.second, 4);

        public static final PowerDerivedUnit squareMetre = new PowerDerivedUnit(SIBase.metre, 2, PhysicalQuantity.Area);

        public static final PowerDerivedUnit cubicMetre = new PowerDerivedUnit(SIBase.metre, 3, PhysicalQuantity.Volume);

        public static final DivisionDerivedUnit metrePerSecond = new DivisionDerivedUnit(SIBase.metre, SIBase.second,
                                                                                   PhysicalQuantity.Velocity);

        public static final DivisionDerivedUnit cubicMetrePerSecond = new DivisionDerivedUnit(cubicMetre, SIBase.second,
                                                                                        PhysicalQuantity.VolumetricFlow);

        public static final DivisionDerivedUnit metrePerSecondSquared = new DivisionDerivedUnit(SIBase.metre, squareSecond,
                                                                                          PhysicalQuantity.Acceleration);

        public static final DivisionDerivedUnit metrePerSecondCubed = new DivisionDerivedUnit(SIBase.metre, cubicSecond,
                                                                                        PhysicalQuantity.Jolt);

        public static final DivisionDerivedUnit metrePerQuarticSecond = new DivisionDerivedUnit(SIBase.metre, quarticSecond,
                                                                                          PhysicalQuantity.Jounce);

        public static final DivisionDerivedUnit radianPerSecond = new DivisionDerivedUnit(SINamedDerived.radian, SIBase.second,
                                                                                    PhysicalQuantity.AngularVelocity);

        public static final DivisionDerivedUnit radianPerSecondSquared = new DivisionDerivedUnit(SINamedDerived.radian, squareSecond,
                                                                                           PhysicalQuantity.AngularAcceleration);

        public static final ProductDerivedUnit newtonSecond = new ProductDerivedUnit(SINamedDerived.newton, SIBase.second,
                                                                               PhysicalQuantity.Momentum);

        public static final ProductDerivedUnit newtonMetre = new ProductDerivedUnit(SINamedDerived.newton, SIBase.metre,
                                                                              PhysicalQuantity.Torque);

        public static final ProductDerivedUnit newtonMetreSecond = new ProductDerivedUnit(newtonMetre, SIBase.second,
                                                                                    PhysicalQuantity.AngularMomentum);

        public static final DivisionDerivedUnit newtonPerSecond = new DivisionDerivedUnit(SINamedDerived.newton, SIBase.second,
                                                                                    PhysicalQuantity.Yank);

        public static final ReciprocalDerivedUnit reciprocalMetre = new ReciprocalDerivedUnit(SIBase.metre);

        public static final DivisionDerivedUnit kilogramPerSquareMetre = new DivisionDerivedUnit(SIBase.kilogram, squareMetre,
                                                                                           PhysicalQuantity.AreaDensity);

        public static final DivisionDerivedUnit kilogramPerCubicMetre = new DivisionDerivedUnit(SIBase.kilogram, cubicMetre,
                                                                                          PhysicalQuantity.Density);

        public static final DivisionDerivedUnit cubicMetrePerKilogram = new DivisionDerivedUnit(cubicMetre, SIBase.kilogram,
                                                                                          PhysicalQuantity.SpecificVolume);

        public static final DivisionDerivedUnit molePerCubicMetre = new DivisionDerivedUnit(SIBase.mole, cubicMetre,
                                                                                      PhysicalQuantity.Molarity);

        public static final DivisionDerivedUnit cubicMetrePerMole = new DivisionDerivedUnit(cubicMetre, SIBase.mole,
                                                                                      PhysicalQuantity.MolarVolume);

        public static final ProductDerivedUnit jouleSecond = new ProductDerivedUnit(SINamedDerived.joule, SIBase.second,
                                                                              PhysicalQuantity.Action);

        public static final DivisionDerivedUnit joulePerKelvin = new DivisionDerivedUnit(SINamedDerived.joule, SIBase.kelvin,
                                                                                   PhysicalQuantity.Entropy);

        //public static final DivisionDerivedUnit joulePerKelvinMole = new DivisionDerivedUnit(SINamedDerived.joule, kelvinMole, PhysicalQuantity.MolarEntropy);

        //public static final DivisionDerivedUnit joulePerKelvinKilogram = new DivisionDerivedUnit(SINamedDerived.joule, kelvinKilogram, PhysicalQuantity.SpecificEntropy);

        public static final DivisionDerivedUnit joulePerMole = new DivisionDerivedUnit(SINamedDerived.joule, SIBase.mole,
                                                                                 PhysicalQuantity.MolarEnergy);

        public static final DivisionDerivedUnit joulePerKilogram = new DivisionDerivedUnit(SINamedDerived.joule, SIBase.kilogram,
                                                                                     PhysicalQuantity.SpecificEnergy);

        public static final DivisionDerivedUnit joulePerCubicMetre = new DivisionDerivedUnit(SINamedDerived.joule, cubicMetre,
                                                                                       PhysicalQuantity.EnergyDensity);

        public static final DivisionDerivedUnit newtonPerMetre = new DivisionDerivedUnit(SINamedDerived.newton, SIBase.metre,
                                                                                   PhysicalQuantity.Stiffness);

        public static final DivisionDerivedUnit wattPerSquareMetre = new DivisionDerivedUnit(SINamedDerived.watt, squareMetre,
                                                                                       PhysicalQuantity.Irradiance);

        //public static final DivisionDerivedUnit wattPerMetreKelvin = new DivisionDerivedUnit();

        public static final ProductDerivedUnit pascalSecond = new ProductDerivedUnit(SINamedDerived.pascal, SIBase.second,
                                                                               PhysicalQuantity.DynamicViscosity);

        public static final ReciprocalDerivedUnit reciprocalKelvin = new ReciprocalDerivedUnit(SIBase.kelvin);

        public static final ReciprocalDerivedUnit reciprocalPascal = new ReciprocalDerivedUnit(SINamedDerived.pascal,
                                                                                         PhysicalQuantity.Compressibility);

        public static final ReciprocalDerivedUnit reciprocalHenry = new ReciprocalDerivedUnit(SINamedDerived.henry,
                                                                                        PhysicalQuantity.MagneticReluctance);

        public static final DivisionDerivedUnit weberPerMetre = new DivisionDerivedUnit(SINamedDerived.weber, SIBase.metre,
                                                                                  PhysicalQuantity.MagneticVectorPotential);

        public static final ProductDerivedUnit weberMetre = new ProductDerivedUnit(SINamedDerived.weber, SIBase.metre,
                                                                             PhysicalQuantity.MagneticMoment);

        public static final ProductDerivedUnit teslaMetre = new ProductDerivedUnit(SINamedDerived.tesla, SIBase.metre,
                                                                             PhysicalQuantity.MagneticRigidity);

        public static final DivisionDerivedUnit joulePerSquareMetre = new DivisionDerivedUnit(SINamedDerived.joule, squareMetre,
                                                                                        PhysicalQuantity.RadiantExposure);

        //        public static final DivisionDerivedUnit cubicMetrePerMoleSecond = new DivisionDerivedUnit(cubicMetre, moleSecond,
        //                                                                                            PhysicalQuantity.CatalyticEfficiency);

        public static final ProductDerivedUnit kilogramSquareMetre = new ProductDerivedUnit(SIBase.kilogram, squareMetre,
                                                                                      PhysicalQuantity.MomentOfInertia);

        public static final DivisionDerivedUnit newtonMetreSecondPerKilogram = new DivisionDerivedUnit(newtonMetreSecond, SIBase.kilogram,
                                                                                                 PhysicalQuantity.SpecificAngularMomentum);

        public static final DivisionDerivedUnit hertzPerSecond = new DivisionDerivedUnit(SINamedDerived.hertz, SIBase.second,
                                                                                   PhysicalQuantity.FrequencyDrift);

        public static final DivisionDerivedUnit lumenPerWatt = new DivisionDerivedUnit(SINamedDerived.lumen, SINamedDerived.watt,
                                                                                 PhysicalQuantity.LuminousEfficacy);

        public static final ProductDerivedUnit ampereRadian = new ProductDerivedUnit(SIBase.ampere, SINamedDerived.radian,
                                                                               PhysicalQuantity.MagnetomotiveForce);

        public static final DivisionDerivedUnit metrePerHenry = new DivisionDerivedUnit(SIBase.metre, SINamedDerived.henry,
                                                                                  PhysicalQuantity.MagneticSusceptibility);

        public static final DivisionDerivedUnit wattPerSteradian = new DivisionDerivedUnit(SINamedDerived.watt, SINamedDerived.steradian,
                                                                                     PhysicalQuantity.RadiantIntensity);

        //        public static final DivisionDerivedUnit wattPerSteradianMetre = new DivisionDerivedUnit(SINamedDerived.watt, steradianMetre,
        //                                                                                          PhysicalQuantity.SpectralIntensity);
        //
        //        public static final DivisionDerivedUnit wattPerSteradianSquareMetre = new DivisionDerivedUnit(SINamedDerived.watt, steradianMetre,
        //                                                                                                PhysicalQuantity.Radiance);
        //
        //        public static final DivisionDerivedUnit wattPerSteradianCubicMetre = new DivisionDerivedUnit(SINamedDerived.watt, steradianMetre,
        //                                                                                               PhysicalQuantity.SpectralRadiance);

        public static final DivisionDerivedUnit wattPerMetre = new DivisionDerivedUnit(SINamedDerived.watt, SIBase.metre,
                                                                                 PhysicalQuantity.SpectralPower);

        static {

        }
    }

    public static final class NonSI {
        // Time
        public static final NamedUnit minute = new NamedUnit("minute", "minutes", "min", "min", PhysicalQuantity.Time);
        public static final NamedUnit hour = new NamedUnit("hour", "hours", "h", "h", PhysicalQuantity.Time);
        public static final NamedUnit day = new NamedUnit("day", "days", "d", "d", PhysicalQuantity.Time);

        //
        public static final NamedUnit arcdegree = new NamedUnit("degree", "degrees", "deg", "\u02da", PhysicalQuantity.PlaneAngle);
        // TODO plaintext vs ascii
        public static final NamedUnit arcminute = new NamedUnit("arc minute", "arc minutes", "'", "'", PhysicalQuantity.PlaneAngle);
        public static final NamedUnit arcsecond = new NamedUnit("arc second", "arc seconds", "\"", "\"", PhysicalQuantity.PlaneAngle);

        public static final PrefixableUnit litre = new PrefixableUnit("litre", "litres", "L", "L", PhysicalQuantity.Volume);
        public static final NamedUnit tonne = new NamedUnit("tonne", "tonnes", "t", "t", PhysicalQuantity.Mass);
        public static final NamedUnit astronomicalunit = new NamedUnit("astronomical unit", "astronomical units", "au", "au", PhysicalQuantity.Length);

        public static final NamedUnit neper = new NamedUnit("neper", "nepers", "Np", PhysicalQuantity.FieldAndPowerQuantity);
        public static final PrefixableUnit bel = new PrefixableUnit("bel", "bels", "B", PhysicalQuantity.FieldAndPowerQuantity);
        public static final PrefixedUnit decibel = new PrefixedUnit(SIPrefix.deci, bel, "decibel", "decibels", "dB", "dB");


        public static final PrefixableUnit electronvolt = new PrefixableUnit("electronvolt", "electronvolts", "eV", "eV", PhysicalQuantity.Energy,
                                                                       Arrays.asList(SIPrefix.milli, SIPrefix.kilo, SIPrefix.mega, SIPrefix.giga,
                                                                                     SIPrefix.tera, SIPrefix.peta, SIPrefix.exa));

        // TODO unified atomic mass unit (Alias Unit and a more names)
        public static final NamedUnit dalton = new NamedUnit("dalton", "daltons", "Da", "Da", PhysicalQuantity.Mass);

        //TODO Natural and Atomic Units

        public static final NamedUnit angstrom = new NamedUnit("angstrom", "\u00e5ngstr\u00f6m", "angstroms", "\u00e5ngstr\u00f6ms", "A", "\u212b",
                                                         PhysicalQuantity.Length);
        // TODO hectare, dectare, etc..
        public static final PrefixableUnit are = new PrefixableUnit("are", "are", "a", "a", PhysicalQuantity.Area);
        public static final PrefixedUnit decare = new PrefixedUnit(SIPrefix.deci, are, "decare", "decares", "daa", "daa");
        public static final PrefixedUnit hectare = new PrefixedUnit(SIPrefix.hecto, are, "hectare", "hectares", "ha", "ha");

        public static final PrefixableUnit barn = new PrefixableUnit("barn", "barns", "b", "b", PhysicalQuantity.Area,
                                                               Arrays.asList(SIPrefix.mega, SIPrefix.kilo, SIPrefix.milli, SIPrefix.micro,
                                                                             SIPrefix.micro, SIPrefix.nano, SIPrefix.pico, SIPrefix.femto,
                                                                             SIPrefix.atto, SIPrefix.zepto, SIPrefix.yocto));

        public static final PrefixableUnit bar = new PrefixableUnit("bar", "bars", "bar", "bar", PhysicalQuantity.Pressure,
                                                              Arrays.asList(SIPrefix.mega, SIPrefix.kilo, SIPrefix.deci, SIPrefix.centi,
                                                                            SIPrefix.milli));

        public static final NamedUnit atmosphere = new NamedUnit("atmosphere", "atmospheres", "atm", "atm", PhysicalQuantity.Pressure);

        // dyne per square centimeter
        public static final NamedUnit barye = new NamedUnit("barye", "baryes", "Ba", "Ba", PhysicalQuantity.Pressure);

        public static final NamedUnit millimetreOfMercury = new NamedUnit("millimetre of mercury", "millimetres of mercury", "mmHg", "mmHg",
                                                                    PhysicalQuantity.Pressure);

        public static final NamedUnit torr = new NamedUnit("torr", "torrs", "Torr", PhysicalQuantity.Pressure);

        // TODO watt hour

        public static final NamedUnit curie = new NamedUnit("curie", "curies", "Ci", "Ci", PhysicalQuantity.RadioActivity);

        public static final NamedUnit roentgen = new NamedUnit("roentgen", "r\u00F6entgen", "roetgens", "r\u00F6entgens", "R", "R",
                                                         PhysicalQuantity.RadiantExposure);

        public static final NamedUnit rad = new NamedUnit("rad", "rads", "rad", "rad", PhysicalQuantity.AbsorbedDose);

        public static final NamedUnit rontgenEquivalentMan = new NamedUnit("rontgen equivalent man", "r\u00F6ntgen equivalent mans",
                                                                     "rontgen equivalent mans", "r\u00F6ntgen equivalent mans", "rem", "rem",
                                                                     PhysicalQuantity.EquivalentDose);

        static {

        }
    }

    public static final class ISO {
        public static final PrefixableUnit bit = new PrefixableUnit("bit", "bits", "b", PhysicalQuantity.InformationEntropy,
                                                              Arrays.asList(SIPrefix.kilo, SIPrefix.mega, SIPrefix.giga, SIPrefix.tera,
                                                                            SIPrefix.peta, SIPrefix.exa, SIPrefix.zetta, SIPrefix.yotta));

        public static final PrefixableUnit bytes = new PrefixableUnit("byte", "bytes", "B", PhysicalQuantity.InformationEntropy,
                                                                Arrays.asList(SIPrefix.kilo, SIPrefix.mega, SIPrefix.giga, SIPrefix.tera,
                                                                              SIPrefix.peta, SIPrefix.exa, SIPrefix.zetta, SIPrefix.yotta));

        // bits per second
        // bytes per second

        static {

        }
    }

    public static final class CGS {
        public static final NamedUnit erg = new NamedUnit("erg", "ergs", "erg", "erg",
                                                    PhysicalQuantity.Energy, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit dyne = new NamedUnit("dyne", "dynes", "dyn", "dyn",
                                                     PhysicalQuantity.Force, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit poise = new NamedUnit("poise", "poises", "P", "P",
                                                      PhysicalQuantity.DynamicViscosity, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit stokes = new NamedUnit("strokes", "strokes", "St", "St",
                                                       PhysicalQuantity.KinematicViscosity, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit stilb = new NamedUnit("stilb", "stilbs", "sb", "sb", PhysicalQuantity.Luminance, UnitSystem.CentimetreGramSecond);
        public static final NamedUnit phot = new NamedUnit("phot", "phots", "ph", "ph", PhysicalQuantity.Illuminance, UnitSystem.CentimetreGramSecond);
        public static final NamedUnit gal = new NamedUnit("gal", "gals", "Gal", "Gal", PhysicalQuantity.Acceleration, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit maxwell = new NamedUnit("maxwell", "maxwells", "Mx", "Mx",
                                                        PhysicalQuantity.MagneticFlux, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit gauss = new NamedUnit("gauss", "gauss", "G", "G",
                                                      PhysicalQuantity.MagneticFluxDensity, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit oersted = new NamedUnit("oersted", "\u0153rsted", "oersted", "\u0153rsted", "Oe", "Oe",
                                                        PhysicalQuantity.MagneticField, UnitSystem.CentimetreGramSecond);

        public static final NamedUnit kayser = new NamedUnit("kayser", "kayers", "K", "K", PhysicalQuantity.WaveNumber, UnitSystem.CentimetreGramSecond);
    }

    public static final class Astronomy {

        // Astronomy
        public static final NamedUnit parsec = new PrefixableUnit("parsec", "parsecs", "pc", "pc", PhysicalQuantity.Length,
                                                            Arrays.asList(SIPrefix.giga, SIPrefix.mega));

        public static final NamedUnit solarMass = new PrefixableUnit("solar mass", "solar masses", "Mo", "Mo", PhysicalQuantity.Mass);

    }

    public static final class Geology {

    }
}
