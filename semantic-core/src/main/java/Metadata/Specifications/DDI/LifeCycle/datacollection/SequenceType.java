//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CodeValueType;


/**
 * A member of the ControlConstruct substitution group. Provides a sequence order for operations expressed as control constructs. The sequence can be typed to support local processing or classification flags and alternate sequencing instructions (such as randomize for each respondent).
 * <p>
 * <p>Java class for SequenceType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="SequenceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:datacollection:3_2}ControlConstructType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}TypeOfSequence" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ControlConstructReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ConstructSequence" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SequenceType", propOrder = {
        "typeOfSequence",
        "controlConstructReference",
        "constructSequence"
})
public class SequenceType
        extends ControlConstructType {

    @XmlElement(name = "TypeOfSequence")
    protected List<CodeValueType> typeOfSequence;
    @XmlElement(name = "ControlConstructReference")
    protected List<ControlConstructReferenceType> controlConstructReference;
    @XmlElement(name = "ConstructSequence")
    protected SpecificSequenceType constructSequence;

    /**
     * Provides the ability to "type" a sequence for classification or processing purposes. Supports the use of an external controlled vocabulary.Gets the value of the typeOfSequence property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the typeOfSequence property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTypeOfSequence().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeValueType }
     */
    public List<CodeValueType> getTypeOfSequence() {
        if (typeOfSequence == null) {
            typeOfSequence = new ArrayList<CodeValueType>();
        }
        return this.typeOfSequence;
    }

    /**
     * References control constructs in the order that they should appear within the instrument.Gets the value of the controlConstructReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the controlConstructReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlConstructReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ControlConstructReferenceType }
     */
    public List<ControlConstructReferenceType> getControlConstructReference() {
        if (controlConstructReference == null) {
            controlConstructReference = new ArrayList<ControlConstructReferenceType>();
        }
        return this.controlConstructReference;
    }

    /**
     * Describes alternate ordering for different cases using the SpecificSequence structure. If you set the sequence to anything other than order of appearance the only allowable children are QuestionConstruct or Sequence. Contents must be randomizable.
     *
     * @return possible object is
     * {@link SpecificSequenceType }
     */
    public SpecificSequenceType getConstructSequence() {
        return constructSequence;
    }

    /**
     * Sets the value of the constructSequence property.
     *
     * @param value allowed object is
     *              {@link SpecificSequenceType }
     */
    public void setConstructSequence(SpecificSequenceType value) {
        this.constructSequence = value;
    }

}
