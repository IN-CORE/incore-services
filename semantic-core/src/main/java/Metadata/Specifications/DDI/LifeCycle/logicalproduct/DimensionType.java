//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * A dimension is provided a rank and a reference to a variable that describes it. Cell locations are "addressed" by the value of their intersect on each dimension provided in rank order.
 * <p>
 * <p>Java class for DimensionType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="DimensionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}VariableReference"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="rank" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DimensionType", propOrder = {
        "variableReference"
})
public class DimensionType {

    @XmlElement(name = "VariableReference", namespace = "ddi:reusable:3_2", required = true)
    protected ReferenceType variableReference;
    @XmlAttribute(name = "rank", required = true)
    protected BigInteger rank;

    /**
     * Identifies the variable describing this dimension. The dimension uses the CodeList and related categories, or a fixed range of numeric values to define the labels and intersect points for the dimension. The data set will contain a value for each cell in the NCube rather than the code from the CodeList.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getVariableReference() {
        return variableReference;
    }

    /**
     * Sets the value of the variableReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setVariableReference(ReferenceType value) {
        this.variableReference = value;
    }

    /**
     * Gets the value of the rank property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getRank() {
        return rank;
    }

    /**
     * Sets the value of the rank property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setRank(BigInteger value) {
        this.rank = value;
    }

}
