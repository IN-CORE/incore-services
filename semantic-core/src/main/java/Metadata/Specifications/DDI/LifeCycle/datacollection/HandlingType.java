//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for HandlingType.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="HandlingType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="include"/&gt;
 *     &lt;enumeration value="preceding"/&gt;
 *     &lt;enumeration value="following"/&gt;
 *     &lt;enumeration value="within"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "HandlingType")
@XmlEnum
public enum HandlingType {


    /**
     * Include StimulusMaterial in resequencing without restriction
     */
    @XmlEnumValue("include")
    INCLUDE("include"),

    /**
     * Attach each StimulusMaterial to the preceding question. StimulusMaterial will move with the preceding question so that it so that it always occurs directly after the same question.
     */
    @XmlEnumValue("preceding")
    PRECEDING("preceding"),

    /**
     * Attach each StimulusMaterial to the Question following it StimulusMaterial will move with the following Question so that it always occurs directly before the same question.
     */
    @XmlEnumValue("following")
    FOLLOWING("following"),

    /**
     * Resequencing occurs within each set of questions as delimited by StimulusMaterial. This is the default value. This allows StimulusMaterial to stay in the same position relative to the set of questions which it currently follows or precedes.
     */
    @XmlEnumValue("within")
    WITHIN("within");
    private final String value;

    HandlingType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static HandlingType fromValue(String v) {
        for (HandlingType c : HandlingType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
