//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;


/**
 * Used to identify described versionable objects for purposes of internal and/or external referencing. Elements of this type cannot be maintained except as part of a complex parent element. Provides containers for Uniform Resource Name (URN) as well as ID information. An entity can either be identified either by a URN and/or an identification sequence. At a minimum, one or the other is required. You must designate they type of URN supported by your agency, either "Canonical" or "Deprecated". To fully support interoperability both the DDI URN and the full identification sequence should be used. Note that to support interoperability of the canonical and deprecated URN, at minimum the MaintainableIdentifier and TypeOfMaintainableObject should be supplied if the canonical URN is being used by the agency. If both URN and the identification sequence is used, and there is any conflict, the URN takes precedence. The element can be designated as an addition, replacement, or deletion to facilitate tracking changes. In addtion to the elements and attributes inherited from AbstractIdentifiable, additional information regarding the versioning process can be provided; version date, the person and/or organization within the maintenance agency responsible for the change as either text or reference, and the reason for the change. If the object created was based on an exisiting object (other than by versioning), the object on which it is based can be identified using BasedOnReference. In addition to UserID, versionable and maintainable objects may also designate additional user specific properties expressed as a key/value pair using UserAttributePair.
 * <p>
 * <p>Java class for AbstractVersionableType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="AbstractVersionableType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}AbstractIdentifiableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}UserAttributePair" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{ddi:reusable:3_2}VersionResponsibility"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}VersionResponsibilityReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{ddi:reusable:3_2}VersionRationale" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}BasedOnObject" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="versionDate" type="{ddi:reusable:3_2}BaseDateType" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractVersionableType", propOrder = {
        "userAttributePair",
        "versionResponsibility",
        "versionResponsibilityReference",
        "versionRationale",
        "basedOnObject"
})
@XmlSeeAlso({
        AbstractMaintainableType.class,
        VersionableType.class
})
public abstract class AbstractVersionableType
        extends AbstractIdentifiableType {

    @XmlElement(name = "UserAttributePair")
    protected List<StandardKeyValuePairType> userAttributePair;
    @XmlElement(name = "VersionResponsibility")
    protected String versionResponsibility;
    @XmlElement(name = "VersionResponsibilityReference")
    protected ReferenceType versionResponsibilityReference;
    @XmlElement(name = "VersionRationale")
    protected VersionRationaleType versionRationale;
    @XmlElement(name = "BasedOnObject")
    protected BasedOnObjectType basedOnObject;
    @XmlAttribute(name = "versionDate")
    protected String versionDate;

    /**
     * A system specific user defined property of the object expressed as a key/value pair. As this is specific to an individual system the use of controlled vocabularies for the key is strongly recommended.Gets the value of the userAttributePair property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userAttributePair property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserAttributePair().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StandardKeyValuePairType }
     */
    public List<StandardKeyValuePairType> getUserAttributePair() {
        if (userAttributePair == null) {
            userAttributePair = new ArrayList<StandardKeyValuePairType>();
        }
        return this.userAttributePair;
    }

    /**
     * Person or organization within the MaintenanceAgency responsible for the version change. If it is important to retain the affiliation between and individual responsible for the version and his/her agency, it may be included in this notation. This is primarily intended for internal use.
     *
     * @return possible object is
     * {@link String }
     */
    public String getVersionResponsibility() {
        return versionResponsibility;
    }

    /**
     * Sets the value of the versionResponsibility property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setVersionResponsibility(String value) {
        this.versionResponsibility = value;
    }

    /**
     * Reference person or organization within the MaintenanceAgency responsible for the version change, as described in an OrganizationScheme. If it is important to retain the affiliation between and individual responsible for the version and his/her agency, a Relation should be created between the individual referenced here and his/her organization. This is primarily intended for internal use.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getVersionResponsibilityReference() {
        return versionResponsibilityReference;
    }

    /**
     * Sets the value of the versionResponsibilityReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setVersionResponsibilityReference(ReferenceType value) {
        this.versionResponsibilityReference = value;
    }

    /**
     * Textual description of the rationale/purpose for the version change and a coded value to provide an internal processing flag within and organization or system. Note that versioning can only take place on objects owned by the specified DDI Agency. If you are creating a local instance of an object from another agency for current or future modification use BasedOnObject. If the changes being made result in what you determine to be new object rather than a version of a previous object, i.e. the change is too extensive to consider it a version of the existing object, create a new object and use BasedOnObject to provide a link to the object or objects that were a basis for the new object.
     *
     * @return possible object is
     * {@link VersionRationaleType }
     */
    public VersionRationaleType getVersionRationale() {
        return versionRationale;
    }

    /**
     * Sets the value of the versionRationale property.
     *
     * @param value allowed object is
     *              {@link VersionRationaleType }
     */
    public void setVersionRationale(VersionRationaleType value) {
        this.versionRationale = value;
    }

    /**
     * Use when creating an object that is based on an existing object or objects that are managed by a different agency or when the new object is NOT simply a version change but you wish to maintain a reference to the object that served as a basis for the new object. BasedOnObject may contain references to any number of objects which serve as a basis for this object, a BasedOnRationalDescription of how the content of the referenced object was incorporated or altered, and a BasedOnRationalCode to allow for specific typing of the BasedOnReference according to an external controlled vocabulary.
     *
     * @return possible object is
     * {@link BasedOnObjectType }
     */
    public BasedOnObjectType getBasedOnObject() {
        return basedOnObject;
    }

    /**
     * Sets the value of the basedOnObject property.
     *
     * @param value allowed object is
     *              {@link BasedOnObjectType }
     */
    public void setBasedOnObject(BasedOnObjectType value) {
        this.basedOnObject = value;
    }

    /**
     * Gets the value of the versionDate property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getVersionDate() {
        return versionDate;
    }

    /**
     * Sets the value of the versionDate property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setVersionDate(String value) {
        this.versionDate = value;
    }

}
