//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MaintainableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;


/**
 * A set of processing events maintained by an agency, and used in the processing data during development, cleaning, converting to variables, aggregating, and comparing. In addition to the standard name, label, and description allows for the inclusion of an existing ProcessingEventScheme by reference and descriptions of ProcessingEvent and ProcessingEventGroup either in-line or by reference.
 * <p>
 * <p>Java class for ProcessingEventSchemeType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ProcessingEventSchemeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}MaintainableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ProcessingEventSchemeName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ProcessingEventSchemeReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingEvent"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingEventReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingEventGroup"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingEventGroupReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProcessingEventSchemeType", propOrder = {
        "processingEventSchemeName",
        "label",
        "description",
        "processingEventSchemeReference",
        "processingEventOrProcessingEventReference",
        "processingEventGroupOrProcessingEventGroupReference"
})
public class ProcessingEventSchemeType
        extends MaintainableType {

    @XmlElement(name = "ProcessingEventSchemeName")
    protected List<NameType> processingEventSchemeName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElement(name = "ProcessingEventSchemeReference")
    protected List<SchemeReferenceType> processingEventSchemeReference;
    @XmlElements({
            @XmlElement(name = "ProcessingEvent", type = ProcessingEventType.class),
            @XmlElement(name = "ProcessingEventReference", type = ReferenceType.class)
    })
    protected List<Object> processingEventOrProcessingEventReference;
    @XmlElements({
            @XmlElement(name = "ProcessingEventGroup", type = ProcessingEventGroupType.class),
            @XmlElement(name = "ProcessingEventGroupReference", type = ReferenceType.class)
    })
    protected List<Object> processingEventGroupOrProcessingEventGroupReference;

    /**
     * A name for the ProcessingEventScheme. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the processingEventSchemeName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingEventSchemeName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingEventSchemeName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getProcessingEventSchemeName() {
        if (processingEventSchemeName == null) {
            processingEventSchemeName = new ArrayList<NameType>();
        }
        return this.processingEventSchemeName;
    }

    /**
     * A display label for the ProcessingEventScheme. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the ProcessingEventScheme. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * Reference to an existing ProcessingEventScheme for inclusion.Gets the value of the processingEventSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingEventSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingEventSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeReferenceType }
     */
    public List<SchemeReferenceType> getProcessingEventSchemeReference() {
        if (processingEventSchemeReference == null) {
            processingEventSchemeReference = new ArrayList<SchemeReferenceType>();
        }
        return this.processingEventSchemeReference;
    }

    /**
     * Gets the value of the processingEventOrProcessingEventReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingEventOrProcessingEventReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingEventOrProcessingEventReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProcessingEventType }
     * {@link ReferenceType }
     */
    public List<Object> getProcessingEventOrProcessingEventReference() {
        if (processingEventOrProcessingEventReference == null) {
            processingEventOrProcessingEventReference = new ArrayList<Object>();
        }
        return this.processingEventOrProcessingEventReference;
    }

    /**
     * Gets the value of the processingEventGroupOrProcessingEventGroupReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingEventGroupOrProcessingEventGroupReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingEventGroupOrProcessingEventGroupReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProcessingEventGroupType }
     * {@link ReferenceType }
     */
    public List<Object> getProcessingEventGroupOrProcessingEventGroupReference() {
        if (processingEventGroupOrProcessingEventGroupReference == null) {
            processingEventGroupOrProcessingEventGroupReference = new ArrayList<Object>();
        }
        return this.processingEventGroupOrProcessingEventGroupReference;
    }

}
