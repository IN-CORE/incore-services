//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MaintainableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;


/**
 * A set of RepresentedVariables managed by an agency. RepresentedVariables are the core reusable parts of a Variable. RepresentedVariable maps to the GSIM Represented Variable. In addition to the standard name, label, and description, allows for the inclusion of an existing RepresentedVariableScheme by reference and RepresentedVariables either in-line or by reference. RepresentedVariables may be grouped for management purposes.
 * <p>
 * <p>Java class for RepresentedVariableSchemeType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="RepresentedVariableSchemeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}MaintainableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableSchemeName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}RepresentedVariableSchemeReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariable"/&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableGroup"/&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableGroupReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepresentedVariableSchemeType", propOrder = {
        "representedVariableSchemeName",
        "label",
        "description",
        "representedVariableSchemeReference",
        "representedVariableOrRepresentedVariableReference",
        "representedVariableGroupOrRepresentedVariableGroupReference"
})
public class RepresentedVariableSchemeType
        extends MaintainableType {

    @XmlElement(name = "RepresentedVariableSchemeName")
    protected List<NameType> representedVariableSchemeName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElement(name = "RepresentedVariableSchemeReference", namespace = "ddi:reusable:3_2")
    protected List<SchemeReferenceType> representedVariableSchemeReference;
    @XmlElements({
            @XmlElement(name = "RepresentedVariable", type = RepresentedVariableType.class),
            @XmlElement(name = "RepresentedVariableReference", type = ReferenceType.class)
    })
    protected List<Object> representedVariableOrRepresentedVariableReference;
    @XmlElements({
            @XmlElement(name = "RepresentedVariableGroup", type = RepresentedVariableGroupType.class),
            @XmlElement(name = "RepresentedVariableGroupReference", type = ReferenceType.class)
    })
    protected List<Object> representedVariableGroupOrRepresentedVariableGroupReference;

    /**
     * A name for the RepresentedVariableScheme. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the representedVariableSchemeName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableSchemeName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableSchemeName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getRepresentedVariableSchemeName() {
        if (representedVariableSchemeName == null) {
            representedVariableSchemeName = new ArrayList<NameType>();
        }
        return this.representedVariableSchemeName;
    }

    /**
     * A display label for the RepresentedVariableScheme. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the RepresentedVariableScheme. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * Inclusion of an existing RepresentedVariableScheme by reference. TypeOfObject should be set to RepresentedVariableScheme Gets the value of the representedVariableSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeReferenceType }
     */
    public List<SchemeReferenceType> getRepresentedVariableSchemeReference() {
        if (representedVariableSchemeReference == null) {
            representedVariableSchemeReference = new ArrayList<SchemeReferenceType>();
        }
        return this.representedVariableSchemeReference;
    }

    /**
     * Gets the value of the representedVariableOrRepresentedVariableReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableOrRepresentedVariableReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableOrRepresentedVariableReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RepresentedVariableType }
     * {@link ReferenceType }
     */
    public List<Object> getRepresentedVariableOrRepresentedVariableReference() {
        if (representedVariableOrRepresentedVariableReference == null) {
            representedVariableOrRepresentedVariableReference = new ArrayList<Object>();
        }
        return this.representedVariableOrRepresentedVariableReference;
    }

    /**
     * Gets the value of the representedVariableGroupOrRepresentedVariableGroupReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableGroupOrRepresentedVariableGroupReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableGroupOrRepresentedVariableGroupReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RepresentedVariableGroupType }
     * {@link ReferenceType }
     */
    public List<Object> getRepresentedVariableGroupOrRepresentedVariableGroupReference() {
        if (representedVariableGroupOrRepresentedVariableGroupReference == null) {
            representedVariableGroupOrRepresentedVariableGroupReference = new ArrayList<Object>();
        }
        return this.representedVariableGroupOrRepresentedVariableGroupReference;
    }

}
