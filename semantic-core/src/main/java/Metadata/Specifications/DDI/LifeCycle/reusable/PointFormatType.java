//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for PointFormatType.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="PointFormatType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="DecimalDegree"/&gt;
 *     &lt;enumeration value="DegreesMinutesSeconds"/&gt;
 *     &lt;enumeration value="DecimalMinutes"/&gt;
 *     &lt;enumeration value="Meters"/&gt;
 *     &lt;enumeration value="Feet"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "PointFormatType")
@XmlEnum
public enum PointFormatType {


    /**
     * ValueRange is expressed as a decimal degree.
     */
    @XmlEnumValue("DecimalDegree")
    DECIMAL_DEGREE("DecimalDegree"),

    /**
     * ValueRange is expressed as Degrees-minutes-seconds.
     */
    @XmlEnumValue("DegreesMinutesSeconds")
    DEGREES_MINUTES_SECONDS("DegreesMinutesSeconds"),

    /**
     * ValueRange is expressed as Decimal Minutes.
     */
    @XmlEnumValue("DecimalMinutes")
    DECIMAL_MINUTES("DecimalMinutes"),

    /**
     * ValueRange is expressed in meters.
     */
    @XmlEnumValue("Meters")
    METERS("Meters"),

    /**
     * ValueRange is expressed in foot.
     */
    @XmlEnumValue("Feet")
    FEET("Feet");
    private final String value;

    PointFormatType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static PointFormatType fromValue(String v) {
        for (PointFormatType c : PointFormatType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
