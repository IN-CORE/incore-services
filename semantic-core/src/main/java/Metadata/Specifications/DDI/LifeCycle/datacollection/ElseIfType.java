//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CommandCodeType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * Use for multiple branching from a single point in the flow logic represented by the flow logic If, Then, ElseIf, Then, etc. This is a packaging element for an IfCondition and ThenConstructReference and not a control construct.
 * <p>
 * <p>Java class for ElseIfType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ElseIfType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}IfCondition" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ThenConstructReference" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ElseIfType", propOrder = {
        "ifCondition",
        "thenConstructReference"
})
public class ElseIfType {

    @XmlElement(name = "IfCondition")
    protected CommandCodeType ifCondition;
    @XmlElement(name = "ThenConstructReference")
    protected ReferenceType thenConstructReference;

    /**
     * The condition which must be met to trigger the Then clause, expressed as a Coding. The condition is an expression in the programming language used in the instrument.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getIfCondition() {
        return ifCondition;
    }

    /**
     * Sets the value of the ifCondition property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setIfCondition(CommandCodeType value) {
        this.ifCondition = value;
    }

    /**
     * Reference to the control construct which should be triggered if the associated condition is met.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getThenConstructReference() {
        return thenConstructReference;
    }

    /**
     * Sets the value of the thenConstructReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setThenConstructReference(ReferenceType value) {
        this.thenConstructReference = value;
    }

}
