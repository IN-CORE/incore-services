//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CommandCodeType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * A member of the control construct substitution group. Describing an action which loops until a limiting condition is met. The ControlConstruct contained in the Loop operates on the LoopVariable until the LoopWhile condition is met, and then control is handed back to the containing control construct.
 * <p>
 * <p>Java class for LoopType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="LoopType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:datacollection:3_2}ControlConstructType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}LoopVariableReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}InitialValue" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}LoopWhile" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}StepValue" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ControlConstructReference" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LoopType", propOrder = {
        "loopVariableReference",
        "initialValue",
        "loopWhile",
        "stepValue",
        "controlConstructReference"
})
public class LoopType
        extends ControlConstructType {

    @XmlElement(name = "LoopVariableReference")
    protected ReferenceType loopVariableReference;
    @XmlElement(name = "InitialValue")
    protected CommandCodeType initialValue;
    @XmlElement(name = "LoopWhile")
    protected CommandCodeType loopWhile;
    @XmlElement(name = "StepValue")
    protected CommandCodeType stepValue;
    @XmlElement(name = "ControlConstructReference")
    protected ControlConstructReferenceType controlConstructReference;

    /**
     * A reference to the variable (as used in the associated CommandCode) which is incremented or otherwise manipulated to meet the conditions stated in the LoopWhile condition.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getLoopVariableReference() {
        return loopVariableReference;
    }

    /**
     * Sets the value of the loopVariableReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setLoopVariableReference(ReferenceType value) {
        this.loopVariableReference = value;
    }

    /**
     * Information on the command used to set the initial value for the process. Could be a simple value.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getInitialValue() {
        return initialValue;
    }

    /**
     * Sets the value of the initialValue property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setInitialValue(CommandCodeType value) {
        this.initialValue = value;
    }

    /**
     * Information on the command used to determine whether the "LoopWhile" condition is met.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getLoopWhile() {
        return loopWhile;
    }

    /**
     * Sets the value of the loopWhile property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setLoopWhile(CommandCodeType value) {
        this.loopWhile = value;
    }

    /**
     * Information on the command used to set the incremental or step value for the process. Could be a simple value.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getStepValue() {
        return stepValue;
    }

    /**
     * Sets the value of the stepValue property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setStepValue(CommandCodeType value) {
        this.stepValue = value;
    }

    /**
     * A reference to the ControlConstruct to implement until the LoopWhile condition is met. This could be a single ControlConstruct or a set of ControlConstructs within a Sequence.
     *
     * @return possible object is
     * {@link ControlConstructReferenceType }
     */
    public ControlConstructReferenceType getControlConstructReference() {
        return controlConstructReference;
    }

    /**
     * Sets the value of the controlConstructReference property.
     *
     * @param value allowed object is
     *              {@link ControlConstructReferenceType }
     */
    public void setControlConstructReference(ControlConstructReferenceType value) {
        this.controlConstructReference = value;
    }

}
