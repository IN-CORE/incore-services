//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * A note related to one or more identifiable objects. Note is designed to be an inherent part of the DDI. (Unlike XML comments or other types of system-level annotations, which may be removed during processing.) DDI recommends placing the note within the maintainable object containing the objects this note relates to in order to assist tracking of note items within a study. Each note may indicate who is responsible for the note, its type using a controlled vocabulary, the subject of the note, a head and note content, a set of key/value pairs and language specification for the overall note. In addition each note must be related to one or more identifiable objects.
 * <p>
 * <p>Java class for NoteType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="NoteType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}TypeOfNote" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NoteSubject" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Relationship" maxOccurs="unbounded"/&gt;
 *         &lt;element name="Responsibility" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Header" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NoteContent" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ProprietaryInfo" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute ref="{http://www.w3.org/XML/1998/namespace}lang"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NoteType", propOrder = {
        "typeOfNote",
        "noteSubject",
        "relationship",
        "responsibility",
        "header",
        "noteContent",
        "proprietaryInfo"
})
public class NoteType {

    @XmlElement(name = "TypeOfNote")
    protected CodeValueType typeOfNote;
    @XmlElement(name = "NoteSubject")
    protected CodeValueType noteSubject;
    @XmlElement(name = "Relationship", required = true)
    protected List<RelationshipType> relationship;
    @XmlElement(name = "Responsibility")
    protected String responsibility;
    @XmlElement(name = "Header")
    protected InternationalStringType header;
    @XmlElement(name = "NoteContent")
    protected StructuredStringType noteContent;
    @XmlElement(name = "ProprietaryInfo")
    protected ProprietaryInfoType proprietaryInfo;
    @XmlAttribute(name = "lang", namespace = "http://www.w3.org/XML/1998/namespace")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "language")
    protected String lang;

    /**
     * Specifies the type of note. Supports the use of a controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getTypeOfNote() {
        return typeOfNote;
    }

    /**
     * Sets the value of the typeOfNote property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setTypeOfNote(CodeValueType value) {
        this.typeOfNote = value;
    }

    /**
     * The subject of the note.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getNoteSubject() {
        return noteSubject;
    }

    /**
     * Sets the value of the noteSubject property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setNoteSubject(CodeValueType value) {
        this.noteSubject = value;
    }

    /**
     * Reference to one or more identifiable objects which the note is related to.Gets the value of the relationship property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relationship property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelationship().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RelationshipType }
     */
    public List<RelationshipType> getRelationship() {
        if (relationship == null) {
            relationship = new ArrayList<RelationshipType>();
        }
        return this.relationship;
    }

    /**
     * Gets the value of the responsibility property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getResponsibility() {
        return responsibility;
    }

    /**
     * Sets the value of the responsibility property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setResponsibility(String value) {
        this.responsibility = value;
    }

    /**
     * A brief label or heading for the note contents.
     *
     * @return possible object is
     * {@link InternationalStringType }
     */
    public InternationalStringType getHeader() {
        return header;
    }

    /**
     * Sets the value of the header property.
     *
     * @param value allowed object is
     *              {@link InternationalStringType }
     */
    public void setHeader(InternationalStringType value) {
        this.header = value;
    }

    /**
     * The content of the note. Note should contain content except when it is a production flag that is fully explained by its "type". If the note provides system specific information in a structured way using XHTML formating, DDI strongly recommends the use of local extensions or the Key/ValueRange pair structure in ProprietaryInfo whenever possible.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getNoteContent() {
        return noteContent;
    }

    /**
     * Sets the value of the noteContent property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setNoteContent(StructuredStringType value) {
        this.noteContent = value;
    }

    /**
     * A set of actions related to the object as described by a set of name-value pairs. This would commonly be used in a case where additional information needs to be recorded regarding the content of a new element or attribute that has not yet been added to the schema, for example when a bug for a missing object has been filed and the user wishes to record the content prior to correction in the schema. Ideally this should be handled by local extensions of the schema as described in Part 2 of the formal documentation. However, the structure in Note allows for an unanticipated need for an extension at run time by providing a means of capturing system specific information in a structured way.
     *
     * @return possible object is
     * {@link ProprietaryInfoType }
     */
    public ProprietaryInfoType getProprietaryInfo() {
        return proprietaryInfo;
    }

    /**
     * Sets the value of the proprietaryInfo property.
     *
     * @param value allowed object is
     *              {@link ProprietaryInfoType }
     */
    public void setProprietaryInfo(ProprietaryInfoType value) {
        this.proprietaryInfo = value;
    }

    /**
     * Indicates the language of content. Note that xml:lang allows for a simple 2 or 3 character language code or a language code extended by a country code , for example en-au for English as used in Australia.
     *
     * @return possible object is
     * {@link String }
     */
    public String getLang() {
        return lang;
    }

    /**
     * Sets the value of the lang property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setLang(String value) {
        this.lang = value;
    }

}
