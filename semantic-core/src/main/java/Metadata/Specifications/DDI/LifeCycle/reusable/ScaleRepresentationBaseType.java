//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.datacollection.ScaleDomainType;


/**
 * A means of capturing the structure of Scale for use as a question response domain or variable value representation. In addition to the basic objects of the representation, the structure defines the dimensions of the scale, an intersect for a multi-dimensional scale, and display layout.
 * <p>
 * <p>Java class for ScaleRepresentationBaseType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ScaleRepresentationBaseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}RepresentationType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ScaleDimension" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DimensionIntersect" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DisplayLayout" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ScaleRepresentationBaseType", propOrder = {
        "scaleDimension",
        "dimensionIntersect",
        "displayLayout"
})
@XmlSeeAlso({
        ScaleDomainType.class
})
public class ScaleRepresentationBaseType
        extends RepresentationType {

    @XmlElement(name = "ScaleDimension")
    protected List<ScaleDimensionType> scaleDimension;
    @XmlElement(name = "DimensionIntersect")
    protected List<DimensionIntersectType> dimensionIntersect;
    @XmlElement(name = "DisplayLayout")
    protected CodeValueType displayLayout;

    /**
     * A description of a dimension of the scale. Note that most scales will have only one dimension.Gets the value of the scaleDimension property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the scaleDimension property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getScaleDimension().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ScaleDimensionType }
     */
    public List<ScaleDimensionType> getScaleDimension() {
        if (scaleDimension == null) {
            scaleDimension = new ArrayList<ScaleDimensionType>();
        }
        return this.scaleDimension;
    }

    /**
     * Identifies the point at which the scales of a multidimensional scale intersect.Gets the value of the dimensionIntersect property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dimensionIntersect property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDimensionIntersect().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DimensionIntersectType }
     */
    public List<DimensionIntersectType> getDimensionIntersect() {
        if (dimensionIntersect == null) {
            dimensionIntersect = new ArrayList<DimensionIntersectType>();
        }
        return this.dimensionIntersect;
    }

    /**
     * Defines they layout such as containing a drawn scale line, a list of values only, an outline (the boundaries of the area defined by 2 or more intersecting scales such as a diamond of opposites), or some other layout design. Allows for the use of a controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getDisplayLayout() {
        return displayLayout;
    }

    /**
     * Sets the value of the displayLayout property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setDisplayLayout(CodeValueType value) {
        this.displayLayout = value;
    }

}
