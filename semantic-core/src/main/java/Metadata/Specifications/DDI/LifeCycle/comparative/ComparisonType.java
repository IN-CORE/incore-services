//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.comparative;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MaintainableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;


/**
 * A maintainable module containing maps between objects of the same or similar type. Maps allow for pair-wise mapping of two objects by describing their similarities and differences in order to make assertions regarding their comparability. Currently maps allow for the comparison of concepts, variables, questions, categories, universes, and representations that have managed content (code, category, numeric, text, datetime and scale). These mapping(s) inform users on the comparability of two objects and facilitate automation. Note that all maps are pairwise, identifying two schemes and the correlation between two items in those schemes. Due to the complexity of some objects, multiple mappings may be required to cover details of the comparison of component parts, e.g. a QuestionMap may also have a related RepresentationMap. By using a set of pairwise comparisons, it is possible to describe complex correspondences - pairwise comparisons are easier to process. In addition to providing a standard name, label, and description, Comparison consists of a simple stack of comparison maps. Comparison maps are currently limited to those objects that can be referenced and are sufficiently structured to support a clear comparison.
 * <p>
 * <p>Java class for ComparisonType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ComparisonType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}MaintainableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:comparative:3_2}ComparisonName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}ConceptMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}ConceptMapReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}VariableMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}VariableMapReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}QuestionMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}QuestionMapReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}CategoryMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}CategoryMapReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}RepresentationMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}RepresentationMapReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:comparative:3_2}UniverseMap"/&gt;
 *           &lt;element ref="{ddi:comparative:3_2}UniverseMapReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ComparisonType", propOrder = {
        "comparisonName",
        "label",
        "description",
        "conceptMapOrConceptMapReference",
        "variableMapOrVariableMapReference",
        "questionMapOrQuestionMapReference",
        "categoryMapOrCategoryMapReference",
        "representationMapOrRepresentationMapReference",
        "universeMapOrUniverseMapReference"
})
public class ComparisonType
        extends MaintainableType {

    @XmlElement(name = "ComparisonName")
    protected List<NameType> comparisonName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElements({
            @XmlElement(name = "ConceptMap", type = GenericMapType.class),
            @XmlElement(name = "ConceptMapReference", type = ReferenceType.class)
    })
    protected List<Object> conceptMapOrConceptMapReference;
    @XmlElements({
            @XmlElement(name = "VariableMap", type = GenericMapType.class),
            @XmlElement(name = "VariableMapReference", type = ReferenceType.class)
    })
    protected List<Object> variableMapOrVariableMapReference;
    @XmlElements({
            @XmlElement(name = "QuestionMap", type = GenericMapType.class),
            @XmlElement(name = "QuestionMapReference", type = ReferenceType.class)
    })
    protected List<Object> questionMapOrQuestionMapReference;
    @XmlElements({
            @XmlElement(name = "CategoryMap", type = GenericMapType.class),
            @XmlElement(name = "CategoryMapReference", type = ReferenceType.class)
    })
    protected List<Object> categoryMapOrCategoryMapReference;
    @XmlElements({
            @XmlElement(name = "RepresentationMap", type = RepresentationMapType.class),
            @XmlElement(name = "RepresentationMapReference", type = ReferenceType.class)
    })
    protected List<Object> representationMapOrRepresentationMapReference;
    @XmlElements({
            @XmlElement(name = "UniverseMap", type = GenericMapType.class),
            @XmlElement(name = "UniverseMapReference", type = ReferenceType.class)
    })
    protected List<Object> universeMapOrUniverseMapReference;

    /**
     * A name for the comparison. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the comparisonName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the comparisonName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getComparisonName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getComparisonName() {
        if (comparisonName == null) {
            comparisonName = new ArrayList<NameType>();
        }
        return this.comparisonName;
    }

    /**
     * A display label for the comparison. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the content and purpose of the comparison. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * Gets the value of the conceptMapOrConceptMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conceptMapOrConceptMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConceptMapOrConceptMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * {@link ReferenceType }
     */
    public List<Object> getConceptMapOrConceptMapReference() {
        if (conceptMapOrConceptMapReference == null) {
            conceptMapOrConceptMapReference = new ArrayList<Object>();
        }
        return this.conceptMapOrConceptMapReference;
    }

    /**
     * Gets the value of the variableMapOrVariableMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the variableMapOrVariableMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVariableMapOrVariableMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * {@link ReferenceType }
     */
    public List<Object> getVariableMapOrVariableMapReference() {
        if (variableMapOrVariableMapReference == null) {
            variableMapOrVariableMapReference = new ArrayList<Object>();
        }
        return this.variableMapOrVariableMapReference;
    }

    /**
     * Gets the value of the questionMapOrQuestionMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the questionMapOrQuestionMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuestionMapOrQuestionMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * {@link ReferenceType }
     */
    public List<Object> getQuestionMapOrQuestionMapReference() {
        if (questionMapOrQuestionMapReference == null) {
            questionMapOrQuestionMapReference = new ArrayList<Object>();
        }
        return this.questionMapOrQuestionMapReference;
    }

    /**
     * Gets the value of the categoryMapOrCategoryMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the categoryMapOrCategoryMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCategoryMapOrCategoryMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * {@link ReferenceType }
     */
    public List<Object> getCategoryMapOrCategoryMapReference() {
        if (categoryMapOrCategoryMapReference == null) {
            categoryMapOrCategoryMapReference = new ArrayList<Object>();
        }
        return this.categoryMapOrCategoryMapReference;
    }

    /**
     * Gets the value of the representationMapOrRepresentationMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representationMapOrRepresentationMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentationMapOrRepresentationMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RepresentationMapType }
     * {@link ReferenceType }
     */
    public List<Object> getRepresentationMapOrRepresentationMapReference() {
        if (representationMapOrRepresentationMapReference == null) {
            representationMapOrRepresentationMapReference = new ArrayList<Object>();
        }
        return this.representationMapOrRepresentationMapReference;
    }

    /**
     * Gets the value of the universeMapOrUniverseMapReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the universeMapOrUniverseMapReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUniverseMapOrUniverseMapReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * {@link ReferenceType }
     */
    public List<Object> getUniverseMapOrUniverseMapReference() {
        if (universeMapOrUniverseMapReference == null) {
            universeMapOrUniverseMapReference = new ArrayList<Object>();
        }
        return this.universeMapOrUniverseMapReference;
    }

}
