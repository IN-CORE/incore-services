//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AdditivityCodeType.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AdditivityCodeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="Stock"/&gt;
 *     &lt;enumeration value="Flow"/&gt;
 *     &lt;enumeration value="NonAdditive"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "AdditivityCodeType")
@XmlEnum
public enum AdditivityCodeType {


    /**
     * A count of objects at one specific time. In general items in a non-hierarchical table of Stock figures can be added together to determine the total.
     */
    @XmlEnumValue("Stock")
    STOCK("Stock"),

    /**
     * A measure that is taken over time and should be treated as the number of items per a unit of time. Analogous to a rate or a speed.
     */
    @XmlEnumValue("Flow")
    FLOW("Flow"),

    /**
     * Due to the nature of the content or the measure, these data cannot be aggregated to determine a sum or accounting of activity.
     */
    @XmlEnumValue("NonAdditive")
    NON_ADDITIVE("NonAdditive");
    private final String value;

    AdditivityCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AdditivityCodeType fromValue(String v) {
        for (AdditivityCodeType c : AdditivityCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
