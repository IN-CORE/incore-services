//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.physicaldataproduct;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CodeValueType;
import Metadata.Specifications.DDI.LifeCycle.reusable.DelimiterType;
import Metadata.Specifications.DDI.LifeCycle.reusable.VersionableType;


/**
 * Description of a PhysicalStructure providing the primary link to the LogicalRecord and general structural information. Each description can apply to one or more data files containing the same logical records in the same overall structure.
 * <p>
 * <p>Java class for PhysicalStructureType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="PhysicalStructureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:physicaldataproduct:3_2}FileFormat" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDataType" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDelimiter" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDecimalPositions" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDecimalSeparator" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDigitGroupSeparator" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct:3_2}GrossRecordStructure" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PhysicalStructureType", propOrder = {
        "fileFormat",
        "defaultDataType",
        "defaultDelimiter",
        "defaultDecimalPositions",
        "defaultDecimalSeparator",
        "defaultDigitGroupSeparator",
        "grossRecordStructure"
})
public class PhysicalStructureType
        extends VersionableType {

    @XmlElement(name = "FileFormat")
    protected CodeValueType fileFormat;
    @XmlElement(name = "DefaultDataType", namespace = "ddi:reusable:3_2")
    protected CodeValueType defaultDataType;
    @XmlElement(name = "DefaultDelimiter", namespace = "ddi:reusable:3_2")
    protected DelimiterType defaultDelimiter;
    @XmlElement(name = "DefaultDecimalPositions", namespace = "ddi:reusable:3_2")
    protected BigInteger defaultDecimalPositions;
    @XmlElement(name = "DefaultDecimalSeparator", namespace = "ddi:reusable:3_2")
    protected String defaultDecimalSeparator;
    @XmlElement(name = "DefaultDigitGroupSeparator", namespace = "ddi:reusable:3_2")
    protected String defaultDigitGroupSeparator;
    @XmlElement(name = "GrossRecordStructure")
    protected List<GrossRecordStructureType> grossRecordStructure;

    /**
     * A brief textual description or classification of the format of the file (e.g., SAS save file, Delimited file, Fixed format file, DDI DataSet). Supports the use of an external controlled vocabulary. DDI recommends the use of a controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getFileFormat() {
        return fileFormat;
    }

    /**
     * Sets the value of the fileFormat property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setFileFormat(CodeValueType value) {
        this.fileFormat = value;
    }

    /**
     * Defines the data type to use unless otherwise specified. Supports the use of an external controlled vocabulary. Similar content to RecommendedDataType.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getDefaultDataType() {
        return defaultDataType;
    }

    /**
     * Sets the value of the defaultDataType property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setDefaultDataType(CodeValueType value) {
        this.defaultDataType = value;
    }

    /**
     * Delimiter definition for delimited (free field) data that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: Empty (default), Tab, Blank, AnyString. If a delimiter is used, free field (delimited data) is assumed; binary formats are not allowed..
     *
     * @return possible object is
     * {@link DelimiterType }
     */
    public DelimiterType getDefaultDelimiter() {
        return defaultDelimiter;
    }

    /**
     * Sets the value of the defaultDelimiter property.
     *
     * @param value allowed object is
     *              {@link DelimiterType }
     */
    public void setDefaultDelimiter(DelimiterType value) {
        this.defaultDelimiter = value;
    }

    /**
     * Number of decimal places (expressed as an integer) for data with an implied decimal separator that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Another expression is the decimal scaling factor (SAS). Default: 0.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getDefaultDecimalPositions() {
        return defaultDecimalPositions;
    }

    /**
     * Sets the value of the defaultDecimalPositions property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setDefaultDecimalPositions(BigInteger value) {
        this.defaultDecimalPositions = value;
    }

    /**
     * The character used to separate the integer and the fraction part of a number (if an explicit separator is used in the data) that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: None (default), Dot, Comma, Other. On the basis of the data definition in DDI documents, data processing tools could compute the necessary precision width on the basis of the format width and the existence of separators. Appropriate data types could be used, i.e. float or double, short or long. The decimal separator definition only makes sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     *
     * @return possible object is
     * {@link String }
     */
    public String getDefaultDecimalSeparator() {
        return defaultDecimalSeparator;
    }

    /**
     * Sets the value of the defaultDecimalSeparator property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setDefaultDecimalSeparator(String value) {
        this.defaultDecimalSeparator = value;
    }

    /**
     * The character used to separate groups of digits (if an explicit separator is used in the data) that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: None (default), Dot, Comma, Other. The decimal separator definition makes only sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     *
     * @return possible object is
     * {@link String }
     */
    public String getDefaultDigitGroupSeparator() {
        return defaultDigitGroupSeparator;
    }

    /**
     * Sets the value of the defaultDigitGroupSeparator property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setDefaultDigitGroupSeparator(String value) {
        this.defaultDigitGroupSeparator = value;
    }

    /**
     * The gross or macro level structures of the record structure including the link to the LogicalRecord and information on the number and ordering of each Physical Segment of the LogicalRecord as stored in the data file.Gets the value of the grossRecordStructure property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the grossRecordStructure property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGrossRecordStructure().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GrossRecordStructureType }
     */
    public List<GrossRecordStructureType> getGrossRecordStructure() {
        if (grossRecordStructure == null) {
            grossRecordStructure = new ArrayList<GrossRecordStructureType>();
        }
        return this.grossRecordStructure;
    }

}
