//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * A means of capturing a managed representation of a Scale for use by a Response Domain Reference or ValueRange Representation Reference. In addition to the name, label, and description of the representation, the structure defines the dimensions of the scale, an intersect for a multi-dimensional scale, and display layout.
 * <p>
 * <p>Java class for ManagedScaleRepresentationType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ManagedScaleRepresentationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ManagedScaleRepresentationName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}RecommendedDataType" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}GenericOutputFormat" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ScaleDimension" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DimensionIntersect" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DisplayLayout" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="classificationLevel" type="{ddi:reusable:3_2}CategoryRelationCodeType" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ManagedScaleRepresentationType", propOrder = {
        "managedScaleRepresentationName",
        "label",
        "description",
        "recommendedDataType",
        "genericOutputFormat",
        "scaleDimension",
        "dimensionIntersect",
        "displayLayout"
})
public class ManagedScaleRepresentationType
        extends VersionableType {

    @XmlElement(name = "ManagedScaleRepresentationName")
    protected List<NameType> managedScaleRepresentationName;
    @XmlElement(name = "Label")
    protected List<LabelType> label;
    @XmlElement(name = "Description")
    protected StructuredStringType description;
    @XmlElement(name = "RecommendedDataType")
    protected CodeValueType recommendedDataType;
    @XmlElement(name = "GenericOutputFormat")
    protected CodeValueType genericOutputFormat;
    @XmlElement(name = "ScaleDimension")
    protected List<ScaleDimensionType> scaleDimension;
    @XmlElement(name = "DimensionIntersect")
    protected List<DimensionIntersectType> dimensionIntersect;
    @XmlElement(name = "DisplayLayout")
    protected CodeValueType displayLayout;
    @XmlAttribute(name = "classificationLevel")
    protected CategoryRelationCodeType classificationLevel;

    /**
     * A name for the ManagedScaleRepresentation. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the managedScaleRepresentationName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the managedScaleRepresentationName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getManagedScaleRepresentationName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getManagedScaleRepresentationName() {
        if (managedScaleRepresentationName == null) {
            managedScaleRepresentationName = new ArrayList<NameType>();
        }
        return this.managedScaleRepresentationName;
    }

    /**
     * A display label for the representation. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the content and purpose of the representation. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * This field provides the recommended treatment of the data within an application. The value should come from a controlled vocabulary - recommended values include the set found in W3C XML Schema Part 2, but excluding string sub-types, QNAME, and NOTATION.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getRecommendedDataType() {
        return recommendedDataType;
    }

    /**
     * Sets the value of the recommendedDataType property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setRecommendedDataType(CodeValueType value) {
        this.recommendedDataType = value;
    }

    /**
     * This field provides a recommended generic treatment of the data for display by an application. The value should come from a controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getGenericOutputFormat() {
        return genericOutputFormat;
    }

    /**
     * Sets the value of the genericOutputFormat property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setGenericOutputFormat(CodeValueType value) {
        this.genericOutputFormat = value;
    }

    /**
     * A description of a dimension of the scale. Note that most scales will have only one dimension.Gets the value of the scaleDimension property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the scaleDimension property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getScaleDimension().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ScaleDimensionType }
     */
    public List<ScaleDimensionType> getScaleDimension() {
        if (scaleDimension == null) {
            scaleDimension = new ArrayList<ScaleDimensionType>();
        }
        return this.scaleDimension;
    }

    /**
     * Identifies the point at which the scales of a multidimensional scale intersect.Gets the value of the dimensionIntersect property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dimensionIntersect property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDimensionIntersect().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DimensionIntersectType }
     */
    public List<DimensionIntersectType> getDimensionIntersect() {
        if (dimensionIntersect == null) {
            dimensionIntersect = new ArrayList<DimensionIntersectType>();
        }
        return this.dimensionIntersect;
    }

    /**
     * Defines they layout such as containing a drawn scale line, a list of values only, an outline (the boundaries of the area defined by 2 or more intersecting scales such as a diamond of opposites), or some other layout design. Allows for the use of a controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getDisplayLayout() {
        return displayLayout;
    }

    /**
     * Sets the value of the displayLayout property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setDisplayLayout(CodeValueType value) {
        this.displayLayout = value;
    }

    /**
     * Gets the value of the classificationLevel property.
     *
     * @return possible object is
     * {@link CategoryRelationCodeType }
     */
    public CategoryRelationCodeType getClassificationLevel() {
        return classificationLevel;
    }

    /**
     * Sets the value of the classificationLevel property.
     *
     * @param value allowed object is
     *              {@link CategoryRelationCodeType }
     */
    public void setClassificationLevel(CategoryRelationCodeType value) {
        this.classificationLevel = value;
    }

}
