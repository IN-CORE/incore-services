//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ManagedRepresentationSchemeType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;


/**
 * A module describing the logical (intellectual) contents of the quantitative data. It is a member of the substitution group BaseLogicalProduct and contains all of the common features of the BaseLogicalProduct as well as content specific to quantitative data. This is a member of the BaseLogicalProduct substitution group and in addition to the content inherited from the BaseLogicalProduct, contains CategorySchemes, CodeListSchemes, ManagedRepresentationSchemes, RepresentedVariableSchemes, VariableSchemes an NCubeSchemes both in-line an by reference.
 * <p>
 * <p>Java class for LogicalProductType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="LogicalProductType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:logicalproduct:3_2}BaseLogicalProductType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}CategoryScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}CategorySchemeReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}CodeListScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}CodeListSchemeReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:reusable:3_2}ManagedRepresentationScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}ManagedRepresentationSchemeReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}RepresentedVariableSchemeReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}VariableScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}VariableSchemeReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:logicalproduct:3_2}NCubeScheme"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}NCubeSchemeReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LogicalProductType", propOrder = {
        "categorySchemeOrCategorySchemeReference",
        "codeListSchemeOrCodeListSchemeReference",
        "managedRepresentationSchemeOrManagedRepresentationSchemeReference",
        "representedVariableSchemeOrRepresentedVariableSchemeReference",
        "variableSchemeOrVariableSchemeReference",
        "nCubeSchemeOrNCubeSchemeReference"
})
public class LogicalProductType
        extends BaseLogicalProductType {

    @XmlElements({
            @XmlElement(name = "CategoryScheme", type = CategorySchemeType.class),
            @XmlElement(name = "CategorySchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> categorySchemeOrCategorySchemeReference;
    @XmlElements({
            @XmlElement(name = "CodeListScheme", type = CodeListSchemeType.class),
            @XmlElement(name = "CodeListSchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> codeListSchemeOrCodeListSchemeReference;
    @XmlElements({
            @XmlElement(name = "ManagedRepresentationScheme", namespace = "ddi:reusable:3_2", type = ManagedRepresentationSchemeType.class),
            @XmlElement(name = "ManagedRepresentationSchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> managedRepresentationSchemeOrManagedRepresentationSchemeReference;
    @XmlElements({
            @XmlElement(name = "RepresentedVariableScheme", type = RepresentedVariableSchemeType.class),
            @XmlElement(name = "RepresentedVariableSchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> representedVariableSchemeOrRepresentedVariableSchemeReference;
    @XmlElements({
            @XmlElement(name = "VariableScheme", type = VariableSchemeType.class),
            @XmlElement(name = "VariableSchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> variableSchemeOrVariableSchemeReference;
    @XmlElements({
            @XmlElement(name = "NCubeScheme", type = NCubeSchemeType.class),
            @XmlElement(name = "NCubeSchemeReference", namespace = "ddi:reusable:3_2", type = SchemeReferenceType.class)
    })
    protected List<Object> nCubeSchemeOrNCubeSchemeReference;

    /**
     * Gets the value of the categorySchemeOrCategorySchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the categorySchemeOrCategorySchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCategorySchemeOrCategorySchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CategorySchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getCategorySchemeOrCategorySchemeReference() {
        if (categorySchemeOrCategorySchemeReference == null) {
            categorySchemeOrCategorySchemeReference = new ArrayList<Object>();
        }
        return this.categorySchemeOrCategorySchemeReference;
    }

    /**
     * Gets the value of the codeListSchemeOrCodeListSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codeListSchemeOrCodeListSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodeListSchemeOrCodeListSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeListSchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getCodeListSchemeOrCodeListSchemeReference() {
        if (codeListSchemeOrCodeListSchemeReference == null) {
            codeListSchemeOrCodeListSchemeReference = new ArrayList<Object>();
        }
        return this.codeListSchemeOrCodeListSchemeReference;
    }

    /**
     * Gets the value of the managedRepresentationSchemeOrManagedRepresentationSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the managedRepresentationSchemeOrManagedRepresentationSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getManagedRepresentationSchemeOrManagedRepresentationSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ManagedRepresentationSchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getManagedRepresentationSchemeOrManagedRepresentationSchemeReference() {
        if (managedRepresentationSchemeOrManagedRepresentationSchemeReference == null) {
            managedRepresentationSchemeOrManagedRepresentationSchemeReference = new ArrayList<Object>();
        }
        return this.managedRepresentationSchemeOrManagedRepresentationSchemeReference;
    }

    /**
     * Gets the value of the representedVariableSchemeOrRepresentedVariableSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableSchemeOrRepresentedVariableSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableSchemeOrRepresentedVariableSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RepresentedVariableSchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getRepresentedVariableSchemeOrRepresentedVariableSchemeReference() {
        if (representedVariableSchemeOrRepresentedVariableSchemeReference == null) {
            representedVariableSchemeOrRepresentedVariableSchemeReference = new ArrayList<Object>();
        }
        return this.representedVariableSchemeOrRepresentedVariableSchemeReference;
    }

    /**
     * Gets the value of the variableSchemeOrVariableSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the variableSchemeOrVariableSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVariableSchemeOrVariableSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link VariableSchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getVariableSchemeOrVariableSchemeReference() {
        if (variableSchemeOrVariableSchemeReference == null) {
            variableSchemeOrVariableSchemeReference = new ArrayList<Object>();
        }
        return this.variableSchemeOrVariableSchemeReference;
    }

    /**
     * Gets the value of the nCubeSchemeOrNCubeSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nCubeSchemeOrNCubeSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNCubeSchemeOrNCubeSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NCubeSchemeType }
     * {@link SchemeReferenceType }
     */
    public List<Object> getNCubeSchemeOrNCubeSchemeReference() {
        if (nCubeSchemeOrNCubeSchemeReference == null) {
            nCubeSchemeOrNCubeSchemeReference = new ArrayList<Object>();
        }
        return this.nCubeSchemeOrNCubeSchemeReference;
    }

}
