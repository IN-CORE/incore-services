//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CommandCodeType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * A member of the ControlConstruct substitution group. Describes an if-then-else decision type of control construct. IF the stated condition is met, the THEN clause is trigged, otherwise the ELSE clause is triggered. Contains an IfCondition (the condition that must be met to trigger the Then clause), a ThenConstructReference (indicating the construct to invoke if the condition is met), an ElseConstructReference (indicating the construct to invoke if the condition is not met), and an ElseIf structure allowing the expression of multiple conditions to invoke multiple branching.
 * <p>
 * <p>Java class for IfThenElseType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="IfThenElseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:datacollection:3_2}ControlConstructType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}IfCondition" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ThenConstructReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ElseIf" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ElseConstructReference" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IfThenElseType", propOrder = {
        "ifCondition",
        "thenConstructReference",
        "elseIf",
        "elseConstructReference"
})
public class IfThenElseType
        extends ControlConstructType {

    @XmlElement(name = "IfCondition")
    protected CommandCodeType ifCondition;
    @XmlElement(name = "ThenConstructReference")
    protected ReferenceType thenConstructReference;
    @XmlElement(name = "ElseIf")
    protected List<ElseIfType> elseIf;
    @XmlElement(name = "ElseConstructReference")
    protected ReferenceType elseConstructReference;

    /**
     * The condition which must be met to trigger the Then clause, expressed as a CommandCode. The condition is an expression in the programming language used in the instrument.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getIfCondition() {
        return ifCondition;
    }

    /**
     * Sets the value of the ifCondition property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setIfCondition(CommandCodeType value) {
        this.ifCondition = value;
    }

    /**
     * Reference to the control construct which should be triggered if the associated condition is met.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getThenConstructReference() {
        return thenConstructReference;
    }

    /**
     * Sets the value of the thenConstructReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setThenConstructReference(ReferenceType value) {
        this.thenConstructReference = value;
    }

    /**
     * Use for multiple branching from a single point in the flow logic represented by the flow logic If, Then, ElseIf, Then, etc.Gets the value of the elseIf property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the elseIf property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getElseIf().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ElseIfType }
     */
    public List<ElseIfType> getElseIf() {
        if (elseIf == null) {
            elseIf = new ArrayList<ElseIfType>();
        }
        return this.elseIf;
    }

    /**
     * Reference to the control construct which is triggered if the associated condition is not met.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getElseConstructReference() {
        return elseConstructReference;
    }

    /**
     * Sets the value of the elseConstructReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setElseConstructReference(ReferenceType value) {
        this.elseConstructReference = value;
    }

}
