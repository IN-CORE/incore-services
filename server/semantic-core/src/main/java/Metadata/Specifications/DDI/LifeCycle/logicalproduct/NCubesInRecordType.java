//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;


/**
 * Identifies the NCubes and any variables in the record external to NCube structures such as case identification variables that are contained in the logical record by indicating that all NCubes contained in the logical product are included, inclusion of a NCubeScheme to include, or listing individual NCubes to include. When the attribute allNCubesInLogicalProduct is set to "false" use the NCubeSchemeReference (which allows for exclusions) and NCubeReference to specify the included variables. A nested VariablesInRecord structure is used to include non-NCube variables in the record.
 * <p>
 * <p>Java class for NCubesInRecordType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="NCubesInRecordType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:logicalproduct:3_2}VariablesInRecord" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NCubeSchemeReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NCubeReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="allNCubesInLogicalProduct" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NCubesInRecordType", propOrder = {
        "variablesInRecord",
        "nCubeSchemeReference",
        "nCubeReference"
})
public class NCubesInRecordType {

    @XmlElement(name = "VariablesInRecord")
    protected VariablesInRecordType variablesInRecord;
    @XmlElement(name = "NCubeSchemeReference", namespace = "ddi:reusable:3_2")
    protected List<SchemeReferenceType> nCubeSchemeReference;
    @XmlElement(name = "NCubeReference", namespace = "ddi:reusable:3_2")
    protected List<ReferenceType> nCubeReference;
    @XmlAttribute(name = "allNCubesInLogicalProduct")
    protected Boolean allNCubesInLogicalProduct;

    /**
     * Use VariablesInRecord to describe any variables in the record that are external to the NCube such as case identifiers.
     *
     * @return possible object is
     * {@link VariablesInRecordType }
     */
    public VariablesInRecordType getVariablesInRecord() {
        return variablesInRecord;
    }

    /**
     * Sets the value of the variablesInRecord property.
     *
     * @param value allowed object is
     *              {@link VariablesInRecordType }
     */
    public void setVariablesInRecord(VariablesInRecordType value) {
        this.variablesInRecord = value;
    }

    /**
     * Reference to an NCubeScheme whose members are included in the logical record. Note that individual items may be excluded from the scheme if not used by the logical record.Gets the value of the nCubeSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nCubeSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNCubeSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeReferenceType }
     */
    public List<SchemeReferenceType> getNCubeSchemeReference() {
        if (nCubeSchemeReference == null) {
            nCubeSchemeReference = new ArrayList<SchemeReferenceType>();
        }
        return this.nCubeSchemeReference;
    }

    /**
     * Reference to an NCube to include in the logical record. This may be used to supplement the contents of an included NCubeScheme or to list all the variables individually.Gets the value of the nCubeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nCubeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNCubeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getNCubeReference() {
        if (nCubeReference == null) {
            nCubeReference = new ArrayList<ReferenceType>();
        }
        return this.nCubeReference;
    }

    /**
     * Gets the value of the allNCubesInLogicalProduct property.
     *
     * @return possible object is
     * {@link Boolean }
     */
    public Boolean isAllNCubesInLogicalProduct() {
        return allNCubesInLogicalProduct;
    }

    /**
     * Sets the value of the allNCubesInLogicalProduct property.
     *
     * @param value allowed object is
     *              {@link Boolean }
     */
    public void setAllNCubesInLogicalProduct(Boolean value) {
        this.allNCubesInLogicalProduct = value;
    }

}
