//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.ncube.tabular;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CodeValueType;
import Metadata.Specifications.DDI.LifeCycle.reusable.DelimiterType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MeasureDimensionType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.VersionableType;


/**
 * A container for defining an instance of an NCube, indicating the matrix address of each cell and where the data for each measure within a cell of the NCube is stored. Allows specifying the values of the attributes attached to a NCube.
 * <p>
 * <p>Java class for NCubeInstanceType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="NCubeInstanceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NCubeReference"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}MeasureDimension" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_ncube_tabular:3_2}AttachedAttribute" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_ncube_tabular:3_2}DataItem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDataType" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDelimiter" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDecimalPositions" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDecimalSeparator" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultDigitGroupSeparator" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NumberOfCases" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NCubeInstanceType", propOrder = {
        "nCubeReference",
        "measureDimension",
        "attachedAttribute",
        "dataItem",
        "defaultDataType",
        "defaultDelimiter",
        "defaultDecimalPositions",
        "defaultDecimalSeparator",
        "defaultDigitGroupSeparator",
        "numberOfCases"
})
public class NCubeInstanceType
        extends VersionableType {

    @XmlElement(name = "NCubeReference", namespace = "ddi:reusable:3_2", required = true)
    protected ReferenceType nCubeReference;
    @XmlElement(name = "MeasureDimension", namespace = "ddi:reusable:3_2")
    protected MeasureDimensionType measureDimension;
    @XmlElement(name = "AttachedAttribute")
    protected List<AttachedAttributeType> attachedAttribute;
    @XmlElement(name = "DataItem")
    protected List<DataItemType> dataItem;
    @XmlElement(name = "DefaultDataType", namespace = "ddi:reusable:3_2")
    protected CodeValueType defaultDataType;
    @XmlElement(name = "DefaultDelimiter", namespace = "ddi:reusable:3_2")
    protected DelimiterType defaultDelimiter;
    @XmlElement(name = "DefaultDecimalPositions", namespace = "ddi:reusable:3_2")
    protected BigInteger defaultDecimalPositions;
    @XmlElement(name = "DefaultDecimalSeparator", namespace = "ddi:reusable:3_2")
    protected String defaultDecimalSeparator;
    @XmlElement(name = "DefaultDigitGroupSeparator", namespace = "ddi:reusable:3_2")
    protected String defaultDigitGroupSeparator;
    @XmlElement(name = "NumberOfCases", namespace = "ddi:reusable:3_2")
    protected BigInteger numberOfCases;

    /**
     * Reference to the logical NCube description.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getNCubeReference() {
        return nCubeReference;
    }

    /**
     * Sets the value of the nCubeReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setNCubeReference(ReferenceType value) {
        this.nCubeReference = value;
    }

    /**
     * This element defines the structure of a measure dimension for the NCube Instance. A value along the MeasureDimension is defined by a stack of references to one or more MeasureDefinitions found in the logical description of the NCube with each containing an attribute of orderValue which provides its value for use in the cell address (similar to the use of a CodeRepresentation of a Variable used as a conceptual dimension. This allows measures (whether one or several) to be handled in the same way as the conceptual dimension of the NCube in declaring a cell address. It is assumed that the value of the MeasureDimension is the last value in the address array. For example, for an NCube with 3 conceptual dimensions of rank 1 = Sex, rank 2 = Age, and rank 3 = Educational Attainment, plus a MeasureDimension. The cell address of 1,4,2,2 would indicate Code value of 1 for Sex, 4 for Age, 2 for Educational Attainment, and 2 for MeasureDimension. For systems translating to SDMX or an OLap structure DDI assumes that the MeasureDefinitionReference with the orderValue="1" is the equivalent of the PrimaryMeasure.
     *
     * @return possible object is
     * {@link MeasureDimensionType }
     */
    public MeasureDimensionType getMeasureDimension() {
        return measureDimension;
    }

    /**
     * Sets the value of the measureDimension property.
     *
     * @param value allowed object is
     *              {@link MeasureDimensionType }
     */
    public void setMeasureDimension(MeasureDimensionType value) {
        this.measureDimension = value;
    }

    /**
     * This is an attribute attached to the NCube as a whole or a region of the NCube as defined in the logical description as a CoordinateRegion. The content of the attribute can be provided as a single value or reference a location in the data store where the attribute value will be found. This may be in addition to attribute information described in the logical structure.Gets the value of the attachedAttribute property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the attachedAttribute property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAttachedAttribute().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AttachedAttributeType }
     */
    public List<AttachedAttributeType> getAttachedAttribute() {
        if (attachedAttribute == null) {
            attachedAttribute = new ArrayList<AttachedAttributeType>();
        }
        return this.attachedAttribute;
    }

    /**
     * Describes a single data item or cell within an NCube Instance. It defines its location within the NCube by its coordinate (matrix) address which is its intersect point on each dimension. Allows for the specification of data item specific attributes, and identifies the physical location of each measure for the data item. May optionally indicate the language of the data contents.Gets the value of the dataItem property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataItem property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataItem().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataItemType }
     */
    public List<DataItemType> getDataItem() {
        if (dataItem == null) {
            dataItem = new ArrayList<DataItemType>();
        }
        return this.dataItem;
    }

    /**
     * An explicit definition of the data type that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. This field is necessary in the case of some numeric data formats where the format definition would allow real values, but the values are integer values. Allowed values are: integer (default), real, string.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getDefaultDataType() {
        return defaultDataType;
    }

    /**
     * Sets the value of the defaultDataType property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setDefaultDataType(CodeValueType value) {
        this.defaultDataType = value;
    }

    /**
     * Delimiter definition for delimited (free field) data that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: Empty (default), Tab, Blank, AnyString. If a delimiter is used, free field (delimited data) is assumed; binary formats are not allowed.
     *
     * @return possible object is
     * {@link DelimiterType }
     */
    public DelimiterType getDefaultDelimiter() {
        return defaultDelimiter;
    }

    /**
     * Sets the value of the defaultDelimiter property.
     *
     * @param value allowed object is
     *              {@link DelimiterType }
     */
    public void setDefaultDelimiter(DelimiterType value) {
        this.defaultDelimiter = value;
    }

    /**
     * Number of decimal places for data with an implied decimal separator that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Another expression is the decimal scaling factor (SAS). Default: 0.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getDefaultDecimalPositions() {
        return defaultDecimalPositions;
    }

    /**
     * Sets the value of the defaultDecimalPositions property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setDefaultDecimalPositions(BigInteger value) {
        this.defaultDecimalPositions = value;
    }

    /**
     * The character used to separate the integer and the fraction part of a number (if an explicit separator is used in the data) that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: None (default), Dot, Comma, Other. On the basis of the data definition in DDI documents, data processing tools could compute the necessary precision width on the basis of the format width and the existence of separators. Appropriate data types could be used, i.e. float or double, short or long. The decimal separator definition only makes sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     *
     * @return possible object is
     * {@link String }
     */
    public String getDefaultDecimalSeparator() {
        return defaultDecimalSeparator;
    }

    /**
     * Sets the value of the defaultDecimalSeparator property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setDefaultDecimalSeparator(String value) {
        this.defaultDecimalSeparator = value;
    }

    /**
     * The character used to separate groups of digits (if an explicit separator is used in the data) that is applied to the majority of the data items reducing the amount of repetitive markup required. It can be overridden at the data item level. Allowed values are: None (default), Dot, Comma, Other. The decimal separator definition makes only sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     *
     * @return possible object is
     * {@link String }
     */
    public String getDefaultDigitGroupSeparator() {
        return defaultDigitGroupSeparator;
    }

    /**
     * Sets the value of the defaultDigitGroupSeparator property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setDefaultDigitGroupSeparator(String value) {
        this.defaultDigitGroupSeparator = value;
    }

    /**
     * Total number of cases represented by the contents of the NCube. This is normally the sum of the cell contents when the NCube contains counts and sub-totals are not included.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getNumberOfCases() {
        return numberOfCases;
    }

    /**
     * Sets the value of the numberOfCases property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setNumberOfCases(BigInteger value) {
        this.numberOfCases = value;
    }

}
