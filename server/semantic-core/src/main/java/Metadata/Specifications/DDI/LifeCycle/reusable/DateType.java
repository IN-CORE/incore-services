//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.datacollection.DataCollectionFrequencyType;


/**
 * Provides the structure of a Date element, which allows a choice between single, simple dates (of BaseDateType) or date ranges. If the Date element contains a range, Cycle may be used to indicate occurrence of this range within a series of ranges as an integer identifying the cycle, i.e. the 4th wave of a data collection cycle would have
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Cycle xmlns="ddi:reusable:3_2" xmlns:dc="http://purl.org/dc/terms/" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;4&lt;/Cycle&gt;
 * </pre>
 * . ISO-formatted dates are required for all standard date fields; a historically-formatted date may also be provided to reflect the specific content of a legacy document or common practice within an agency or for publication. All uses of DateType should be optional.
 * <p>
 * <p>Java class for DateType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="DateType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{ddi:reusable:3_2}SimpleDate"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}HistoricalDate" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{ddi:reusable:3_2}StartDate"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}HistoricalStartDate" minOccurs="0"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}EndDate" minOccurs="0"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}HistoricalEndDate" minOccurs="0"/&gt;
 *             &lt;element name="Cycle" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{ddi:reusable:3_2}EndDate"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}HistoricalEndDate" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DateType", propOrder = {
        "content"
})
@XmlSeeAlso({
        AccessRestrictionDateType.class,
        ReferenceDateType.class,
        DataCollectionFrequencyType.class
})
public class DateType {

    @XmlElementRefs({
            @XmlElementRef(name = "HistoricalEndDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "Cycle", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "HistoricalStartDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "StartDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "SimpleDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "HistoricalDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "EndDate", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> content;

    /**
     * Gets the rest of the content models.
     * <p>
     * <p>
     * You are getting this "catch-all" property because of the following reason:
     * The field name "EndDate" is used by two different parts of a schema. See:
     * line 189 of http://www.ddialliance.org/Specification/DDI-Lifecycle/3.2/XMLSchema/reusable.xsd
     * line 172 of http://www.ddialliance.org/Specification/DDI-Lifecycle/3.2/XMLSchema/reusable.xsd
     * <p>
     * To get rid of this property, apply a property customization to one
     * of both of the following declarations to change their names:
     * Gets the value of the content property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContent().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link HistoricalDateType }{@code >}
     * {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * {@link JAXBElement }{@code <}{@link HistoricalDateType }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link HistoricalDateType }{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    public List<JAXBElement<?>> getContent() {
        if (content == null) {
            content = new ArrayList<JAXBElement<?>>();
        }
        return this.content;
    }

}
