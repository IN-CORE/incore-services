//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * Allows attachment of a response domain to a specific item in a code or category scheme. For example, attach a TextDomain to the value "Other".
 * <p>
 * <p>Java class for AttachmentLocationType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="AttachmentLocationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice maxOccurs="unbounded"&gt;
 *           &lt;element ref="{ddi:reusable:3_2}CodeReference"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}CategoryReference"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}DomainSpecificValue"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AttachmentLocationType", propOrder = {
        "codeReferenceOrCategoryReferenceOrDomainSpecificValue"
})
public class AttachmentLocationType {

    @XmlElementRefs({
            @XmlElementRef(name = "CodeReference", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "CategoryReference", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "DomainSpecificValue", namespace = "ddi:datacollection:3_2", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> codeReferenceOrCategoryReferenceOrDomainSpecificValue;

    /**
     * Gets the value of the codeReferenceOrCategoryReferenceOrDomainSpecificValue property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codeReferenceOrCategoryReferenceOrDomainSpecificValue property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodeReferenceOrCategoryReferenceOrDomainSpecificValue().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link ReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link DomainSpecificValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link ReferenceType }{@code >}
     */
    public List<JAXBElement<?>> getCodeReferenceOrCategoryReferenceOrDomainSpecificValue() {
        if (codeReferenceOrCategoryReferenceOrDomainSpecificValue == null) {
            codeReferenceOrCategoryReferenceOrDomainSpecificValue = new ArrayList<JAXBElement<?>>();
        }
        return this.codeReferenceOrCategoryReferenceOrDomainSpecificValue;
    }

}
