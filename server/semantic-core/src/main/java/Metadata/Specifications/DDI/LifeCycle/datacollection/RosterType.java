//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CommandCodeType;
import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;


/**
 * A roster is an unlabeled list of numbered rows or columns depending upon orientation. The numbers may or may not be displayed but will be used as information for creating the cell coordinate address. The Roster defines the numbering used for the coordinate system, sets a minimum and maximum number of values, and provides the condition for continuation. The Roster label is used in the same way as the label of the CodeDomain, providing a dimension level header or label.
 * <p>
 * <p>Java class for RosterType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="RosterType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ConditionForContinuation" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="baseCodeValue" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *       &lt;attribute name="codeIterationValue" use="required" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *       &lt;attribute name="minimumRequired" type="{http://www.w3.org/2001/XMLSchema}integer" default="1" /&gt;
 *       &lt;attribute name="maximumAllowed" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RosterType", propOrder = {
        "label",
        "conditionForContinuation"
})
public class RosterType {

    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected LabelType label;
    @XmlElement(name = "ConditionForContinuation")
    protected CommandCodeType conditionForContinuation;
    @XmlAttribute(name = "baseCodeValue", required = true)
    protected BigInteger baseCodeValue;
    @XmlAttribute(name = "codeIterationValue", required = true)
    protected BigInteger codeIterationValue;
    @XmlAttribute(name = "minimumRequired")
    protected BigInteger minimumRequired;
    @XmlAttribute(name = "maximumAllowed")
    protected BigInteger maximumAllowed;

    /**
     * A display label for the roster. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
     *
     * @return possible object is
     * {@link LabelType }
     */
    public LabelType getLabel() {
        return label;
    }

    /**
     * Sets the value of the label property.
     *
     * @param value allowed object is
     *              {@link LabelType }
     */
    public void setLabel(LabelType value) {
        this.label = value;
    }

    /**
     * Provides the condition for continuing to add another iteration to the roster. This may be a human readable condition and/or a machine-actionable command.
     *
     * @return possible object is
     * {@link CommandCodeType }
     */
    public CommandCodeType getConditionForContinuation() {
        return conditionForContinuation;
    }

    /**
     * Sets the value of the conditionForContinuation property.
     *
     * @param value allowed object is
     *              {@link CommandCodeType }
     */
    public void setConditionForContinuation(CommandCodeType value) {
        this.conditionForContinuation = value;
    }

    /**
     * Gets the value of the baseCodeValue property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getBaseCodeValue() {
        return baseCodeValue;
    }

    /**
     * Sets the value of the baseCodeValue property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setBaseCodeValue(BigInteger value) {
        this.baseCodeValue = value;
    }

    /**
     * Gets the value of the codeIterationValue property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getCodeIterationValue() {
        return codeIterationValue;
    }

    /**
     * Sets the value of the codeIterationValue property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setCodeIterationValue(BigInteger value) {
        this.codeIterationValue = value;
    }

    /**
     * Gets the value of the minimumRequired property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getMinimumRequired() {
        if (minimumRequired == null) {
            return new BigInteger("1");
        } else {
            return minimumRequired;
        }
    }

    /**
     * Sets the value of the minimumRequired property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setMinimumRequired(BigInteger value) {
        this.minimumRequired = value;
    }

    /**
     * Gets the value of the maximumAllowed property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getMaximumAllowed() {
        return maximumAllowed;
    }

    /**
     * Sets the value of the maximumAllowed property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setMaximumAllowed(BigInteger value) {
        this.maximumAllowed = value;
    }

}
