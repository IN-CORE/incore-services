//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.instance;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * A Fragment Instance is used to transfer maintainable or versionable objects plus any associated notes and other material in response to a query. TopLevelReference provides a record of the reference(s) (from the query) to which the FragmentInstance is responding. The contents of the maintainable and versionable objects are transported as ddi:Fragment entries. Child items, which are items included in the top level items by reference, may be provided as additional ddi:Fragment entries depending on the desired resolution depth. Be aware that within the DDI model all versionables must provide contextual information on the maintainable parent. When creating your web services you must be able to provide contextual information on the maintainable parent of a versionable object. The identification and reference structure provides the MaintainableObject structure to use in capturing this information if it is not provided by the URN structure of the versionable object.
 * <p>
 * <p>Java class for FragmentInstanceType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="FragmentInstanceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:instance:3_2}TopLevelReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:instance:3_2}Fragment" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FragmentInstanceType", propOrder = {
        "topLevelReference",
        "fragment"
})
public class FragmentInstanceType {

    @XmlElement(name = "TopLevelReference")
    protected List<ReferenceType> topLevelReference;
    @XmlElement(name = "Fragment")
    protected List<FragmentType> fragment;

    /**
     * TopLevelReference is used to denote which items in the Fragment Instance are the specific results of a query or process. For example, if a user queries for a Variable, the response may include several items in the returned FragmentInstance: the Variable, several related Concepts, CodeLists, Questions, or other referenced items. In order to clarify which item is the main item in response to a query, a reference to that item can be specified as a TopLevelReference. Note that if a Identifiable object is being resolved, the query will be to the parent Versionable or Maintainable.Gets the value of the topLevelReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the topLevelReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTopLevelReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getTopLevelReference() {
        if (topLevelReference == null) {
            topLevelReference = new ArrayList<ReferenceType>();
        }
        return this.topLevelReference;
    }

    /**
     * A Fragment is a means of transporting a maintainable or versionable object plus any associated notes and other material. This item is repeated for each object included in the FragmentInstance. At minimum it should include the objects identified in TopLevelReference. Fragments for child objects of the items identified by a TopLevelReference may also be included. For a versionable object this requires information on the identification of its parent maintainable. This is considered to be administrative metadata and the addition of this metadata to an object does not cause it to version. The list of maintainables and versionables may occur in any order followed by associated notes and OtherMaterial.Gets the value of the fragment property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fragment property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFragment().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FragmentType }
     */
    public List<FragmentType> getFragment() {
        if (fragment == null) {
            fragment = new ArrayList<FragmentType>();
        }
        return this.fragment;
    }

}
