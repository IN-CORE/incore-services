//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.archive.ArchiveType;
import Metadata.Specifications.DDI.LifeCycle.archive.OrganizationSchemeType;
import Metadata.Specifications.DDI.LifeCycle.comparative.ComparisonType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.ConceptSchemeType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.ConceptualComponentType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.ConceptualVariableSchemeType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.GeographicLocationSchemeType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.GeographicStructureSchemeType;
import Metadata.Specifications.DDI.LifeCycle.conceptualcomponent.UniverseSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.ControlConstructSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.DataCollectionType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.InstrumentSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.InterviewerInstructionSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.ProcessingEventSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.ProcessingInstructionSchemeType;
import Metadata.Specifications.DDI.LifeCycle.datacollection.QuestionSchemeType;
import Metadata.Specifications.DDI.LifeCycle.ddiprofile.DDIProfileType;
import Metadata.Specifications.DDI.LifeCycle.group.GroupType;
import Metadata.Specifications.DDI.LifeCycle.group.LocalHoldingPackageType;
import Metadata.Specifications.DDI.LifeCycle.group.ResourcePackageType;
import Metadata.Specifications.DDI.LifeCycle.instance.DDIInstanceType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.BaseLogicalProductType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.CategorySchemeType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.CodeListSchemeType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.CodeListType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.NCubeSchemeType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.RepresentedVariableSchemeType;
import Metadata.Specifications.DDI.LifeCycle.logicalproduct.VariableSchemeType;
import Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.PhysicalDataProductType;
import Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.PhysicalStructureSchemeType;
import Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.RecordLayoutSchemeType;
import Metadata.Specifications.DDI.LifeCycle.physicalinstance.PhysicalInstanceType;
import Metadata.Specifications.DDI.LifeCycle.studyunit.StudyUnitType;


/**
 * Adds the attribute identifying this as a maintainable object. All content of Maintainable is considered to be administrative metadata. Note that changes to the administrative metadata does not drive a change in the version of the parent objects. All content of Maintainable with the exception of 'Note' is considered to be administrative metadata. Note that changes to the administrative metadata does not drive a change in the version of the parent objects. See DDI 3.2 Technical Documentation: Part I for further details.
 * <p>
 * <p>Java class for MaintainableType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="MaintainableType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}AbstractMaintainableType"&gt;
 *       &lt;attribute name="isMaintainable" type="{http://www.w3.org/2001/XMLSchema}boolean" fixed="true" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MaintainableType")
@XmlSeeAlso({
        DDIInstanceType.class,
        ArchiveType.class,
        OrganizationSchemeType.class,
        QualityStatementSchemeType.class,
        ManagedRepresentationSchemeType.class,
        ComparisonType.class,
        DataCollectionType.class,
        ProcessingEventSchemeType.class,
        ProcessingInstructionSchemeType.class,
        InterviewerInstructionSchemeType.class,
        InstrumentSchemeType.class,
        ControlConstructSchemeType.class,
        QuestionSchemeType.class,
        BaseLogicalProductType.class,
        CodeListSchemeType.class,
        CategorySchemeType.class,
        CodeListType.class,
        NCubeSchemeType.class,
        VariableSchemeType.class,
        RepresentedVariableSchemeType.class,
        ConceptualComponentType.class,
        ConceptualVariableSchemeType.class,
        ConceptSchemeType.class,
        UniverseSchemeType.class,
        GeographicStructureSchemeType.class,
        GeographicLocationSchemeType.class,
        PhysicalDataProductType.class,
        PhysicalStructureSchemeType.class,
        RecordLayoutSchemeType.class,
        DDIProfileType.class,
        GroupType.class,
        ResourcePackageType.class,
        LocalHoldingPackageType.class,
        StudyUnitType.class,
        PhysicalInstanceType.class
})
public abstract class MaintainableType
        extends AbstractMaintainableType {

    @XmlAttribute(name = "isMaintainable")
    protected Boolean isMaintainable;

    /**
     * Gets the value of the isMaintainable property.
     *
     * @return possible object is
     * {@link Boolean }
     */
    public boolean isIsMaintainable() {
        if (isMaintainable == null) {
            return true;
        } else {
            return isMaintainable;
        }
    }

    /**
     * Sets the value of the isMaintainable property.
     *
     * @param value allowed object is
     *              {@link Boolean }
     */
    public void setIsMaintainable(Boolean value) {
        this.isMaintainable = value;
    }

}
