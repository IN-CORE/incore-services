//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.physicaldataproduct;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.IdentifiableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * The gross or macro level structures of the record structure including the link to the LogicalRecord and information on the number and ordering of each Physical Segment of the LogicalRecord as stored in the data file. Provides an attribute stating the number of physical segments with a default value of "1".
 * <p>
 * <p>Java class for GrossRecordStructureType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="GrossRecordStructureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}IdentifiableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:physicaldataproduct:3_2}LogicalRecordReference"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct:3_2}PhysicalRecordSegment" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="numberOfPhysicalSegments" type="{http://www.w3.org/2001/XMLSchema}integer" default="1" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GrossRecordStructureType", propOrder = {
        "logicalRecordReference",
        "physicalRecordSegment"
})
public class GrossRecordStructureType
        extends IdentifiableType {

    @XmlElement(name = "LogicalRecordReference", required = true)
    protected ReferenceType logicalRecordReference;
    @XmlElement(name = "PhysicalRecordSegment", required = true)
    protected List<PhysicalRecordSegmentType> physicalRecordSegment;
    @XmlAttribute(name = "numberOfPhysicalSegments")
    protected BigInteger numberOfPhysicalSegments;

    /**
     * Reference to the LogicalRecord that describes the record type and intellectual content of the record within the physical data file.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getLogicalRecordReference() {
        return logicalRecordReference;
    }

    /**
     * Sets the value of the logicalRecordReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setLogicalRecordReference(ReferenceType value) {
        this.logicalRecordReference = value;
    }

    /**
     * A description of each physical storage segment required to completely cover the logical record. A logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment.Gets the value of the physicalRecordSegment property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the physicalRecordSegment property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhysicalRecordSegment().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PhysicalRecordSegmentType }
     */
    public List<PhysicalRecordSegmentType> getPhysicalRecordSegment() {
        if (physicalRecordSegment == null) {
            physicalRecordSegment = new ArrayList<PhysicalRecordSegmentType>();
        }
        return this.physicalRecordSegment;
    }

    /**
     * Gets the value of the numberOfPhysicalSegments property.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getNumberOfPhysicalSegments() {
        if (numberOfPhysicalSegments == null) {
            return new BigInteger("1");
        } else {
            return numberOfPhysicalSegments;
        }
    }

    /**
     * Sets the value of the numberOfPhysicalSegments property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setNumberOfPhysicalSegments(BigInteger value) {
        this.numberOfPhysicalSegments = value;
    }

}
