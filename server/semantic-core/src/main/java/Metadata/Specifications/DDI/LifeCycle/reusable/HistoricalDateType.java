//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * Used to preserve an historical date, formatted in a non-ISO fashion.
 * <p>
 * <p>Java class for HistoricalDateType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="HistoricalDateType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}NonISODate"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}HistoricalDateFormat" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Calendar" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HistoricalDateType", propOrder = {
        "nonISODate",
        "historicalDateFormat",
        "calendar"
})
public class HistoricalDateType {

    @XmlElement(name = "NonISODate", required = true)
    protected String nonISODate;
    @XmlElement(name = "HistoricalDateFormat")
    protected CodeValueType historicalDateFormat;
    @XmlElement(name = "Calendar")
    protected CodeValueType calendar;

    /**
     * This is the date expressed in a non-ISO compliant structure. Primarily used to retain legacy content or to express non-Gregorian calender dates.
     *
     * @return possible object is
     * {@link String }
     */
    public String getNonISODate() {
        return nonISODate;
    }

    /**
     * Sets the value of the nonISODate property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setNonISODate(String value) {
        this.nonISODate = value;
    }

    /**
     * Indicate the structure of the date provided in NonISODate. For example if the NonISODate contained 4/1/2000 the Historical Date Format would be mm/dd/yyyy. The use of a controlled vocabulary is strongly recommended to support interoperability.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getHistoricalDateFormat() {
        return historicalDateFormat;
    }

    /**
     * Sets the value of the historicalDateFormat property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setHistoricalDateFormat(CodeValueType value) {
        this.historicalDateFormat = value;
    }

    /**
     * Specifies the type of calendar used (e.g., Gregorian, Julian, Jewish).
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getCalendar() {
        return calendar;
    }

    /**
     * Sets the value of the calendar property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setCalendar(CodeValueType value) {
        this.calendar = value;
    }

}
