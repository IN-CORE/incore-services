//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.datacollection.CodeDomainType;


/**
 * Describes the use of all or part of a CodeList as a representation used by a question response domain or variable value representation.
 * <p>
 * <p>Java class for CodeRepresentationBaseType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="CodeRepresentationBaseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}RepresentationType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}CodeListReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}CodeSubsetInformation" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CodeRepresentationBaseType", propOrder = {
        "codeListReference",
        "codeSubsetInformation"
})
@XmlSeeAlso({
        CodeDomainType.class
})
public class CodeRepresentationBaseType
        extends RepresentationType {

    @XmlElement(name = "CodeListReference")
    protected ReferenceType codeListReference;
    @XmlElement(name = "CodeSubsetInformation")
    protected CodeSubsetInformationType codeSubsetInformation;

    /**
     * A reference to the CodeList included in this representation using the Reference structure.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getCodeListReference() {
        return codeListReference;
    }

    /**
     * Sets the value of the codeListReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setCodeListReference(ReferenceType value) {
        this.codeListReference = value;
    }

    /**
     * Allows further specification of the codes to use from the CodeList by defining the level or only the most discrete codes of a hierarchical CodeList, the range of codes to use, or an itemized sub-set.
     *
     * @return possible object is
     * {@link CodeSubsetInformationType }
     */
    public CodeSubsetInformationType getCodeSubsetInformation() {
        return codeSubsetInformation;
    }

    /**
     * Sets the value of the codeSubsetInformation property.
     *
     * @param value allowed object is
     *              {@link CodeSubsetInformationType }
     */
    public void setCodeSubsetInformation(CodeSubsetInformationType value) {
        this.codeSubsetInformation = value;
    }

}
