//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.proprietary;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.physicaldataproduct.BaseRecordLayoutType;
import Metadata.Specifications.DDI.LifeCycle.reusable.CodeValueType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ProprietaryInfoType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SoftwareType;


/**
 * A member of the BaseRecordLayout substitution group intended for use when the data items are stored in an external proprietary format. In addition to the link to the PhysicalStructure provided by BaseRecordLayout, the record layout is this namespace (m4) identifies the character set and array base for the external data, identifies the software of the proprietary system, provides a description of how the data item is addressed within the system, provides default values for numeric data types, text data types, dateTime data types, whether coded data should be treated as numeric or text, a default variable scheme, proprietary information, and a full description of each data item including its link to the variable description and system address.
 * <p>
 * <p>Java class for RecordLayoutType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="RecordLayoutType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:physicaldataproduct:3_2}BaseRecordLayoutType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}CharacterSet" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ArrayBase" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}SystemSoftware"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}DataItemAddress" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}DefaultNumericDataTypeReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}DefaultTextDataTypeReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}DefaultDateTimeDataTypeReference" minOccurs="0"/&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}CodedDataAsNumeric"/&gt;
 *           &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}CodedDataAsText"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DefaultVariableSchemeReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ProprietaryInfo" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicaldataproduct_proprietary:3_2}DataItem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RecordLayoutType", propOrder = {
        "characterSet",
        "arrayBase",
        "systemSoftware",
        "dataItemAddress",
        "defaultNumericDataTypeReference",
        "defaultTextDataTypeReference",
        "defaultDateTimeDataTypeReference",
        "codedDataAsNumeric",
        "codedDataAsText",
        "defaultVariableSchemeReference",
        "proprietaryInfo",
        "dataItem"
})
public class RecordLayoutType
        extends BaseRecordLayoutType {

    @XmlElement(name = "CharacterSet", namespace = "ddi:reusable:3_2")
    protected CodeValueType characterSet;
    @XmlElement(name = "ArrayBase", namespace = "ddi:reusable:3_2")
    protected BigInteger arrayBase;
    @XmlElement(name = "SystemSoftware", required = true)
    protected SoftwareType systemSoftware;
    @XmlElement(name = "DataItemAddress")
    protected DataItemAddressType dataItemAddress;
    @XmlElement(name = "DefaultNumericDataTypeReference")
    protected ReferenceType defaultNumericDataTypeReference;
    @XmlElement(name = "DefaultTextDataTypeReference")
    protected ReferenceType defaultTextDataTypeReference;
    @XmlElement(name = "DefaultDateTimeDataTypeReference")
    protected ReferenceType defaultDateTimeDataTypeReference;
    @XmlElement(name = "CodedDataAsNumeric")
    protected CodedDataAsNumericType codedDataAsNumeric;
    @XmlElement(name = "CodedDataAsText")
    protected CodedDataAsTextType codedDataAsText;
    @XmlElement(name = "DefaultVariableSchemeReference", namespace = "ddi:reusable:3_2")
    protected SchemeReferenceType defaultVariableSchemeReference;
    @XmlElement(name = "ProprietaryInfo", namespace = "ddi:reusable:3_2")
    protected ProprietaryInfoType proprietaryInfo;
    @XmlElement(name = "DataItem")
    protected List<DataItemType> dataItem;

    /**
     * Character set used in the data file (e.g., US ASCII, EBCDIC, UTF-8). This is a required field.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getCharacterSet() {
        return characterSet;
    }

    /**
     * Sets the value of the characterSet property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setCharacterSet(CodeValueType value) {
        this.characterSet = value;
    }

    /**
     * Sets the array base for any arrays used in the definition (that is, whether the first value is in position 0 or 1, etc.). This may be the data array in a delimited data file or the measure array for measures that are bundled and stored in a single location. Array base is generally set to either 0 or 1. There is no override provided as systems processing a record would use a consistent array base.
     *
     * @return possible object is
     * {@link BigInteger }
     */
    public BigInteger getArrayBase() {
        return arrayBase;
    }

    /**
     * Sets the value of the arrayBase property.
     *
     * @param value allowed object is
     *              {@link BigInteger }
     */
    public void setArrayBase(BigInteger value) {
        this.arrayBase = value;
    }

    /**
     * Specification of a software package used to instantiate a data collection method.
     *
     * @return possible object is
     * {@link SoftwareType }
     */
    public SoftwareType getSystemSoftware() {
        return systemSoftware;
    }

    /**
     * Sets the value of the systemSoftware property.
     *
     * @param value allowed object is
     *              {@link SoftwareType }
     */
    public void setSystemSoftware(SoftwareType value) {
        this.systemSoftware = value;
    }

    /**
     * Provides minimum information on data item address system, such as variable ID or Name, etc.
     *
     * @return possible object is
     * {@link DataItemAddressType }
     */
    public DataItemAddressType getDataItemAddress() {
        return dataItemAddress;
    }

    /**
     * Sets the value of the dataItemAddress property.
     *
     * @param value allowed object is
     *              {@link DataItemAddressType }
     */
    public void setDataItemAddress(DataItemAddressType value) {
        this.dataItemAddress = value;
    }

    /**
     * Declares the most common data type used for numeric data.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getDefaultNumericDataTypeReference() {
        return defaultNumericDataTypeReference;
    }

    /**
     * Sets the value of the defaultNumericDataTypeReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setDefaultNumericDataTypeReference(ReferenceType value) {
        this.defaultNumericDataTypeReference = value;
    }

    /**
     * Declares the most common data type used for textual data.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getDefaultTextDataTypeReference() {
        return defaultTextDataTypeReference;
    }

    /**
     * Sets the value of the defaultTextDataTypeReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setDefaultTextDataTypeReference(ReferenceType value) {
        this.defaultTextDataTypeReference = value;
    }

    /**
     * Declares the most common data type used for date-time data.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getDefaultDateTimeDataTypeReference() {
        return defaultDateTimeDataTypeReference;
    }

    /**
     * Sets the value of the defaultDateTimeDataTypeReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setDefaultDateTimeDataTypeReference(ReferenceType value) {
        this.defaultDateTimeDataTypeReference = value;
    }

    /**
     * Indicates that coded data should be treated as numeric, and defines the numeric type.
     *
     * @return possible object is
     * {@link CodedDataAsNumericType }
     */
    public CodedDataAsNumericType getCodedDataAsNumeric() {
        return codedDataAsNumeric;
    }

    /**
     * Sets the value of the codedDataAsNumeric property.
     *
     * @param value allowed object is
     *              {@link CodedDataAsNumericType }
     */
    public void setCodedDataAsNumeric(CodedDataAsNumericType value) {
        this.codedDataAsNumeric = value;
    }

    /**
     * Indicates that coded data should be treated as text, and defines the text type.
     *
     * @return possible object is
     * {@link CodedDataAsTextType }
     */
    public CodedDataAsTextType getCodedDataAsText() {
        return codedDataAsText;
    }

    /**
     * Sets the value of the codedDataAsText property.
     *
     * @param value allowed object is
     *              {@link CodedDataAsTextType }
     */
    public void setCodedDataAsText(CodedDataAsTextType value) {
        this.codedDataAsText = value;
    }

    /**
     * References a variable scheme for the RecordLayout. This can be overridden by individual data items if they are from a different variable scheme.
     *
     * @return possible object is
     * {@link SchemeReferenceType }
     */
    public SchemeReferenceType getDefaultVariableSchemeReference() {
        return defaultVariableSchemeReference;
    }

    /**
     * Sets the value of the defaultVariableSchemeReference property.
     *
     * @param value allowed object is
     *              {@link SchemeReferenceType }
     */
    public void setDefaultVariableSchemeReference(SchemeReferenceType value) {
        this.defaultVariableSchemeReference = value;
    }

    /**
     * Contains information proprietary to the software package which produced the data file. This is expressed as a set of key(name)/ value pairs.
     *
     * @return possible object is
     * {@link ProprietaryInfoType }
     */
    public ProprietaryInfoType getProprietaryInfo() {
        return proprietaryInfo;
    }

    /**
     * Sets the value of the proprietaryInfo property.
     *
     * @param value allowed object is
     *              {@link ProprietaryInfoType }
     */
    public void setProprietaryInfo(ProprietaryInfoType value) {
        this.proprietaryInfo = value;
    }

    /**
     * Describes a single data item within the file including its variable reference, information on the data type, and any item specific proprietary information.Gets the value of the dataItem property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataItem property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataItem().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataItemType }
     */
    public List<DataItemType> getDataItem() {
        if (dataItem == null) {
            dataItem = new ArrayList<DataItemType>();
        }
        return this.dataItem;
    }

}
