//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MaintainableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;


/**
 * A set of Processing Instructions (General and Generation Instructions) maintained by an agency. In addition to the standard name, label, and description allows for the inclusion of an existing ProcessingInstructionScheme by reference, and GeneralInstruction, GenerationInstruction, and ProcessingInstructionGroup descriptions either in-line or by reference.
 * <p>
 * <p>Java class for ProcessingInstructionSchemeType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ProcessingInstructionSchemeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}MaintainableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ProcessingInstructionSchemeName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ProcessingInstructionSchemeReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}GeneralInstruction"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}GeneralInstructionReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}GenerationInstruction"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}GenerationInstructionReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingInstructionGroup"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}ProcessingInstructionGroupReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProcessingInstructionSchemeType", propOrder = {
        "processingInstructionSchemeName",
        "label",
        "description",
        "processingInstructionSchemeReference",
        "generalInstructionOrGeneralInstructionReference",
        "generationInstructionOrGenerationInstructionReference",
        "processingInstructionGroupOrProcessingInstructionGroupReference"
})
public class ProcessingInstructionSchemeType
        extends MaintainableType {

    @XmlElement(name = "ProcessingInstructionSchemeName")
    protected List<NameType> processingInstructionSchemeName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElement(name = "ProcessingInstructionSchemeReference")
    protected List<SchemeReferenceType> processingInstructionSchemeReference;
    @XmlElements({
            @XmlElement(name = "GeneralInstruction", type = GeneralInstructionType.class),
            @XmlElement(name = "GeneralInstructionReference", type = ReferenceType.class)
    })
    protected List<Object> generalInstructionOrGeneralInstructionReference;
    @XmlElements({
            @XmlElement(name = "GenerationInstruction", type = GenerationInstructionType.class),
            @XmlElement(name = "GenerationInstructionReference", type = ReferenceType.class)
    })
    protected List<Object> generationInstructionOrGenerationInstructionReference;
    @XmlElements({
            @XmlElement(name = "ProcessingInstructionGroup", type = ProcessingInstructionGroupType.class),
            @XmlElement(name = "ProcessingInstructionGroupReference", type = ReferenceType.class)
    })
    protected List<Object> processingInstructionGroupOrProcessingInstructionGroupReference;

    /**
     * A name for the ProcessingInstructionScheme. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the processingInstructionSchemeName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingInstructionSchemeName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingInstructionSchemeName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getProcessingInstructionSchemeName() {
        if (processingInstructionSchemeName == null) {
            processingInstructionSchemeName = new ArrayList<NameType>();
        }
        return this.processingInstructionSchemeName;
    }

    /**
     * A display label for the ProcessingInstructionScheme. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the ProcessingInstructionScheme. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * Reference to an existing ProcessingInstructionScheme for inclusion.Gets the value of the processingInstructionSchemeReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingInstructionSchemeReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingInstructionSchemeReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SchemeReferenceType }
     */
    public List<SchemeReferenceType> getProcessingInstructionSchemeReference() {
        if (processingInstructionSchemeReference == null) {
            processingInstructionSchemeReference = new ArrayList<SchemeReferenceType>();
        }
        return this.processingInstructionSchemeReference;
    }

    /**
     * Gets the value of the generalInstructionOrGeneralInstructionReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the generalInstructionOrGeneralInstructionReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGeneralInstructionOrGeneralInstructionReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GeneralInstructionType }
     * {@link ReferenceType }
     */
    public List<Object> getGeneralInstructionOrGeneralInstructionReference() {
        if (generalInstructionOrGeneralInstructionReference == null) {
            generalInstructionOrGeneralInstructionReference = new ArrayList<Object>();
        }
        return this.generalInstructionOrGeneralInstructionReference;
    }

    /**
     * Gets the value of the generationInstructionOrGenerationInstructionReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the generationInstructionOrGenerationInstructionReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenerationInstructionOrGenerationInstructionReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenerationInstructionType }
     * {@link ReferenceType }
     */
    public List<Object> getGenerationInstructionOrGenerationInstructionReference() {
        if (generationInstructionOrGenerationInstructionReference == null) {
            generationInstructionOrGenerationInstructionReference = new ArrayList<Object>();
        }
        return this.generationInstructionOrGenerationInstructionReference;
    }

    /**
     * Gets the value of the processingInstructionGroupOrProcessingInstructionGroupReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingInstructionGroupOrProcessingInstructionGroupReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingInstructionGroupOrProcessingInstructionGroupReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProcessingInstructionGroupType }
     * {@link ReferenceType }
     */
    public List<Object> getProcessingInstructionGroupOrProcessingInstructionGroupReference() {
        if (processingInstructionGroupOrProcessingInstructionGroupReference == null) {
            processingInstructionGroupOrProcessingInstructionGroupReference = new ArrayList<Object>();
        }
        return this.processingInstructionGroupOrProcessingInstructionGroupReference;
    }

}
