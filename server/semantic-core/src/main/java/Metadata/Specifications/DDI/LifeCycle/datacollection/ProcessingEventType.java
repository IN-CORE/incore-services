//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.ProcessingInstructionReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.VersionableType;


/**
 * ProcessingEvent can contain a number of operations of different types to express a range of events that occur together. For example a ProcessingEvent of a CleaningOperation may also include a reference to a ProcessingInstruction used in the cleaning process. Event activities include ControlOperation, CleaningOperation, Weighting, and DataAppraisalInformation. References to related processing instructions and quality statement may be included.
 * <p>
 * <p>Java class for ProcessingEventType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="ProcessingEventType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ControlOperation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}CleaningOperation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}Weighting"/&gt;
 *           &lt;element ref="{ddi:datacollection:3_2}WeightingReference"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}DataAppraisalInformation" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ProcessingInstructionReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}QualityStatementReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProcessingEventType", propOrder = {
        "controlOperation",
        "cleaningOperation",
        "weightingOrWeightingReference",
        "dataAppraisalInformation",
        "processingInstructionReference",
        "qualityStatementReference"
})
public class ProcessingEventType
        extends VersionableType {

    @XmlElement(name = "ControlOperation")
    protected List<OperationType> controlOperation;
    @XmlElement(name = "CleaningOperation")
    protected List<OperationType> cleaningOperation;
    @XmlElements({
            @XmlElement(name = "Weighting", type = WeightingType.class),
            @XmlElement(name = "WeightingReference", type = ReferenceType.class)
    })
    protected List<Object> weightingOrWeightingReference;
    @XmlElement(name = "DataAppraisalInformation")
    protected List<DataAppraisalInformationType> dataAppraisalInformation;
    @XmlElement(name = "ProcessingInstructionReference", namespace = "ddi:reusable:3_2")
    protected List<ProcessingInstructionReferenceType> processingInstructionReference;
    @XmlElement(name = "QualityStatementReference", namespace = "ddi:reusable:3_2")
    protected List<ReferenceType> qualityStatementReference;

    /**
     * Description of a Control IOperation used to facilitate data control.Gets the value of the controlOperation property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the controlOperation property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlOperation().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OperationType }
     */
    public List<OperationType> getControlOperation() {
        if (controlOperation == null) {
            controlOperation = new ArrayList<OperationType>();
        }
        return this.controlOperation;
    }

    /**
     * Description of a Cleaning IOperation such as consistency checking, invalid or out of range values, etc.Gets the value of the cleaningOperation property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cleaningOperation property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCleaningOperation().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OperationType }
     */
    public List<OperationType> getCleaningOperation() {
        if (cleaningOperation == null) {
            cleaningOperation = new ArrayList<OperationType>();
        }
        return this.cleaningOperation;
    }

    /**
     * Gets the value of the weightingOrWeightingReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the weightingOrWeightingReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getWeightingOrWeightingReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link WeightingType }
     * {@link ReferenceType }
     */
    public List<Object> getWeightingOrWeightingReference() {
        if (weightingOrWeightingReference == null) {
            weightingOrWeightingReference = new ArrayList<Object>();
        }
        return this.weightingOrWeightingReference;
    }

    /**
     * Description of the data appraisal processing including the resultant sampling error and response rate.Gets the value of the dataAppraisalInformation property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataAppraisalInformation property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataAppraisalInformation().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataAppraisalInformationType }
     */
    public List<DataAppraisalInformationType> getDataAppraisalInformation() {
        if (dataAppraisalInformation == null) {
            dataAppraisalInformation = new ArrayList<DataAppraisalInformationType>();
        }
        return this.dataAppraisalInformation;
    }

    /**
     * Reference to a processing instruction (GeneralInstruction or GenerationInstruction) used during the processing event. The basic Reference structure is extended to allow for the use of ParameterLinkage to link specific source parameters to the InParameter of the instruction to reflect its use within this specific Processing Event.Gets the value of the processingInstructionReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the processingInstructionReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcessingInstructionReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProcessingInstructionReferenceType }
     */
    public List<ProcessingInstructionReferenceType> getProcessingInstructionReference() {
        if (processingInstructionReference == null) {
            processingInstructionReference = new ArrayList<ProcessingInstructionReferenceType>();
        }
        return this.processingInstructionReference;
    }

    /**
     * Reference to a quality statement relating to the processing event.Gets the value of the qualityStatementReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the qualityStatementReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQualityStatementReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getQualityStatementReference() {
        if (qualityStatementReference == null) {
            qualityStatementReference = new ArrayList<ReferenceType>();
        }
        return this.qualityStatementReference;
    }

}
