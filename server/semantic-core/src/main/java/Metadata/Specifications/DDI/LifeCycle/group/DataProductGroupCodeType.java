//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.group;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DataProductGroupCodeType.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DataProductGroupCodeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="D0"/&gt;
 *     &lt;enumeration value="D1"/&gt;
 *     &lt;enumeration value="D2"/&gt;
 *     &lt;enumeration value="D3"/&gt;
 *     &lt;enumeration value="D4"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "DataProductGroupCodeType")
@XmlEnum
public enum DataProductGroupCodeType {


    /**
     * No specified relationship
     */
    @XmlEnumValue("D0")
    D_0("D0"),

    /**
     * Single data file from a data collection
     */
    @XmlEnumValue("D1")
    D_1("D1"),

    /**
     * Multiple data products from a single data collection
     */
    @XmlEnumValue("D2")
    D_2("D2"),

    /**
     * Integration of multiple data sets into a single integrated structure
     */
    @XmlEnumValue("D3")
    D_3("D3"),

    /**
     * Multiple data files each from a different data collection
     */
    @XmlEnumValue("D4")
    D_4("D4");
    private final String value;

    DataProductGroupCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DataProductGroupCodeType fromValue(String v) {
        for (DataProductGroupCodeType c : DataProductGroupCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
