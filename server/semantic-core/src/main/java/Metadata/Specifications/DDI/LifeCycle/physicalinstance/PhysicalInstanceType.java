//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.physicalinstance;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CitationType;
import Metadata.Specifications.DDI.LifeCycle.reusable.CodeValueType;
import Metadata.Specifications.DDI.LifeCycle.reusable.CoverageType;
import Metadata.Specifications.DDI.LifeCycle.reusable.MaintainableType;
import Metadata.Specifications.DDI.LifeCycle.reusable.OtherMaterialType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ProprietaryInfoType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;


/**
 * Includes information about the physical instance of a data product (an actual data file). It completes the documentation contained in the Physical Data Product module that is specific to the individual file and serves as a descriptive record of the external data file. Physical Instance provides a citation for the data file, a link to the RecordLayout(s) used by the files records, a description of it coverage (as a constraint if different from the study), check figures for quality control (e.g. digital fingerprint, record count, etc.), and a statistical summary of the data in the file at both the variable and category level.
 * <p>
 * <p>Java class for PhysicalInstanceType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="PhysicalInstanceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}MaintainableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Citation" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}DataFingerprint" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Coverage" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}OtherMaterial" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}DataRelationshipReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}RecordLayoutReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}DefaultMissingValuesReference" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}DataFileIdentification" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}DataFileVersion" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}QualityStatementReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}GrossFileStructure" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}ProprietaryInfo" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}StatisticalSummary" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:physicalinstance:3_2}ByteOrder" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PhysicalInstanceType", propOrder = {
        "citation",
        "dataFingerprint",
        "coverage",
        "otherMaterial",
        "dataRelationshipReference",
        "recordLayoutReference",
        "defaultMissingValuesReference",
        "dataFileIdentification",
        "dataFileVersion",
        "qualityStatementReference",
        "grossFileStructure",
        "proprietaryInfo",
        "statisticalSummary",
        "byteOrder"
})
public class PhysicalInstanceType
        extends MaintainableType {

    @XmlElement(name = "Citation", namespace = "ddi:reusable:3_2")
    protected CitationType citation;
    @XmlElement(name = "DataFingerprint")
    protected List<DataFingerprintType> dataFingerprint;
    @XmlElement(name = "Coverage", namespace = "ddi:reusable:3_2")
    protected CoverageType coverage;
    @XmlElement(name = "OtherMaterial", namespace = "ddi:reusable:3_2")
    protected List<OtherMaterialType> otherMaterial;
    @XmlElement(name = "DataRelationshipReference", namespace = "ddi:reusable:3_2")
    protected List<ReferenceType> dataRelationshipReference;
    @XmlElement(name = "RecordLayoutReference", namespace = "ddi:reusable:3_2")
    protected List<ReferenceType> recordLayoutReference;
    @XmlElement(name = "DefaultMissingValuesReference")
    protected DefaultMissingValuesReferenceType defaultMissingValuesReference;
    @XmlElement(name = "DataFileIdentification")
    protected List<DataFileIdentificationType> dataFileIdentification;
    @XmlElement(name = "DataFileVersion")
    protected DataFileVersionType dataFileVersion;
    @XmlElement(name = "QualityStatementReference", namespace = "ddi:reusable:3_2")
    protected List<ReferenceType> qualityStatementReference;
    @XmlElement(name = "GrossFileStructure")
    protected GrossFileStructureType grossFileStructure;
    @XmlElement(name = "ProprietaryInfo", namespace = "ddi:reusable:3_2")
    protected ProprietaryInfoType proprietaryInfo;
    @XmlElement(name = "StatisticalSummary")
    protected StatisticalSummaryType statisticalSummary;
    @XmlElement(name = "ByteOrder")
    protected CodeValueType byteOrder;

    /**
     * A citation for the physical instance of a data set. Note that a DOI or similar unique identifier for the data file should be placed in InternationalIdentifier. It is strongly recommended that use of a Citation in this location includes the use of the optional sub-element Title.
     *
     * @return possible object is
     * {@link CitationType }
     */
    public CitationType getCitation() {
        return citation;
    }

    /**
     * Sets the value of the citation property.
     *
     * @param value allowed object is
     *              {@link CitationType }
     */
    public void setCitation(CitationType value) {
        this.citation = value;
    }

    /**
     * Allows for assigning a hash value (digital fingerprint) to the data or data file. Set the attribute flag to "data" when the hash value provides a digital fingerprint to the data contained in the file regardless of the storage format (ASCII, SAS, binary, etc.). One approach to compute a data fingerprint is the Universal Numerical Fingerprint (UNF). Set the attribute flag to "dataFile" if the digital fingerprint is only for the data file in its current storage format.Gets the value of the dataFingerprint property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataFingerprint property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataFingerprint().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataFingerprintType }
     */
    public List<DataFingerprintType> getDataFingerprint() {
        if (dataFingerprint == null) {
            dataFingerprint = new ArrayList<DataFingerprintType>();
        }
        return this.dataFingerprint;
    }

    /**
     * Includes information about the topical, spatial, and temporal coverage of the physical instance. May be expressed as a restriction of the parent study coverage.
     *
     * @return possible object is
     * {@link CoverageType }
     */
    public CoverageType getCoverage() {
        return coverage;
    }

    /**
     * Sets the value of the coverage property.
     *
     * @param value allowed object is
     *              {@link CoverageType }
     */
    public void setCoverage(CoverageType value) {
        this.coverage = value;
    }

    /**
     * Provides information about other resources related to the physical instance.Gets the value of the otherMaterial property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the otherMaterial property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOtherMaterial().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OtherMaterialType }
     */
    public List<OtherMaterialType> getOtherMaterial() {
        if (otherMaterial == null) {
            otherMaterial = new ArrayList<OtherMaterialType>();
        }
        return this.otherMaterial;
    }

    /**
     * Reference to the DataRelationship containing the LogicalRecord to which the RecordLayout refers. Repeat for cases where LogicalRecords are described in multiple DataRelationship structures. Note that this does not imply that all of the LogicalRecords described in the DataRelationship are contained, wholly or in part in the PhysicalInstance. This reference allows for a direct path between the PhysicalInstance and the related content found in a LogicalProduct.Gets the value of the dataRelationshipReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataRelationshipReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataRelationshipReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getDataRelationshipReference() {
        if (dataRelationshipReference == null) {
            dataRelationshipReference = new ArrayList<ReferenceType>();
        }
        return this.dataRelationshipReference;
    }

    /**
     * References the record layout of the data documented in the physical instance.Gets the value of the recordLayoutReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recordLayoutReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecordLayoutReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getRecordLayoutReference() {
        if (recordLayoutReference == null) {
            recordLayoutReference = new ArrayList<ReferenceType>();
        }
        return this.recordLayoutReference;
    }

    /**
     * References the content of the default missing values used in the file. The content of this file overrides default missing value information provided in the LogicalRecord. Allows for the specification that is a Systems Missing ValueRange.
     *
     * @return possible object is
     * {@link DefaultMissingValuesReferenceType }
     */
    public DefaultMissingValuesReferenceType getDefaultMissingValuesReference() {
        return defaultMissingValuesReference;
    }

    /**
     * Sets the value of the defaultMissingValuesReference property.
     *
     * @param value allowed object is
     *              {@link DefaultMissingValuesReferenceType }
     */
    public void setDefaultMissingValuesReference(DefaultMissingValuesReferenceType value) {
        this.defaultMissingValuesReference = value;
    }

    /**
     * Identifies the data file documented in the physical instance and provides information about its location.Gets the value of the dataFileIdentification property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataFileIdentification property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataFileIdentification().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataFileIdentificationType }
     */
    public List<DataFileIdentificationType> getDataFileIdentification() {
        if (dataFileIdentification == null) {
            dataFileIdentification = new ArrayList<DataFileIdentificationType>();
        }
        return this.dataFileIdentification;
    }

    /**
     * Provides the version information for the data file related to this physical instance. Note that while Physical Instance allows for multiple copies of the same data file (such as backup copies) the assumption is that they are identical in terms of content, layout, format and version.
     *
     * @return possible object is
     * {@link DataFileVersionType }
     */
    public DataFileVersionType getDataFileVersion() {
        return dataFileVersion;
    }

    /**
     * Sets the value of the dataFileVersion property.
     *
     * @param value allowed object is
     *              {@link DataFileVersionType }
     */
    public void setDataFileVersion(DataFileVersionType value) {
        this.dataFileVersion = value;
    }

    /**
     * A reference to a Quality Statement pertaining to the quality of the study methodology, metadata, or data to which it is associated. Quality statements may be related to external quality standards.Gets the value of the qualityStatementReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the qualityStatementReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQualityStatementReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getQualityStatementReference() {
        if (qualityStatementReference == null) {
            qualityStatementReference = new ArrayList<ReferenceType>();
        }
        return this.qualityStatementReference;
    }

    /**
     * Includes information about the file structure, as well as other characteristics that are specific to the physical instance.
     *
     * @return possible object is
     * {@link GrossFileStructureType }
     */
    public GrossFileStructureType getGrossFileStructure() {
        return grossFileStructure;
    }

    /**
     * Sets the value of the grossFileStructure property.
     *
     * @param value allowed object is
     *              {@link GrossFileStructureType }
     */
    public void setGrossFileStructure(GrossFileStructureType value) {
        this.grossFileStructure = value;
    }

    /**
     * Contains information proprietary to the software package which produced the data file. This is expressed as a set of name-value pairs. The value may be taken from a controlled vocabulary.
     *
     * @return possible object is
     * {@link ProprietaryInfoType }
     */
    public ProprietaryInfoType getProprietaryInfo() {
        return proprietaryInfo;
    }

    /**
     * Sets the value of the proprietaryInfo property.
     *
     * @param value allowed object is
     *              {@link ProprietaryInfoType }
     */
    public void setProprietaryInfo(ProprietaryInfoType value) {
        this.proprietaryInfo = value;
    }

    /**
     * Includes variable and category statistics data documented in the physical instance, or a reference to a physical instance where the statistics are described or located in line.
     *
     * @return possible object is
     * {@link StatisticalSummaryType }
     */
    public StatisticalSummaryType getStatisticalSummary() {
        return statisticalSummary;
    }

    /**
     * Sets the value of the statisticalSummary property.
     *
     * @param value allowed object is
     *              {@link StatisticalSummaryType }
     */
    public void setStatisticalSummary(StatisticalSummaryType value) {
        this.statisticalSummary = value;
    }

    /**
     * Contains a term from a controlled vocabulary indicating the byte ordering.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getByteOrder() {
        return byteOrder;
    }

    /**
     * Sets the value of the byteOrder property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setByteOrder(CodeValueType value) {
        this.byteOrder = value;
    }

}
