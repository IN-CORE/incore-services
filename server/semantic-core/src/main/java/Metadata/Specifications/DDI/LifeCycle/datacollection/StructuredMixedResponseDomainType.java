//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.datacollection;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * A structure to allow for mixing multiple response domains in a single question. These may also include intervening text statements that are tightly bound to a response domain. A common example is the use of a CodeDomain and a TextDomain where the TextDomain is associated with the value with the label "Other" in the CodeDomain. ResponseDomains should be chosen that do NOT duplicate responses such as CodeLists with overlapping codes. Be aware that certain instruments may collect responses in such a way that confusion between a code response and text response may be possible. The process of resolving such conflicts should be addressed in the data processing instructions. There is an assumption that if a text or numeric response duplicates a coded response to a question, that the value is that of the coded category. At least one ResponseDomain must be provided.
 * <p>
 * <p>Java class for StructuredMixedResponseDomainType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="StructuredMixedResponseDomainType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice maxOccurs="unbounded" minOccurs="2"&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ResponseTextSet"/&gt;
 *         &lt;element ref="{ddi:datacollection:3_2}ResponseDomainInMixed"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StructuredMixedResponseDomainType", propOrder = {
        "responseTextSetOrResponseDomainInMixed"
})
public class StructuredMixedResponseDomainType {

    @XmlElements({
            @XmlElement(name = "ResponseTextSet", type = ResponseTextSetType.class),
            @XmlElement(name = "ResponseDomainInMixed", type = ResponseDomainInMixedType.class)
    })
    protected List<Object> responseTextSetOrResponseDomainInMixed;

    /**
     * Gets the value of the responseTextSetOrResponseDomainInMixed property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the responseTextSetOrResponseDomainInMixed property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResponseTextSetOrResponseDomainInMixed().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResponseTextSetType }
     * {@link ResponseDomainInMixedType }
     */
    public List<Object> getResponseTextSetOrResponseDomainInMixed() {
        if (responseTextSetOrResponseDomainInMixed == null) {
            responseTextSetOrResponseDomainInMixed = new ArrayList<Object>();
        }
        return this.responseTextSetOrResponseDomainInMixed;
    }

}
