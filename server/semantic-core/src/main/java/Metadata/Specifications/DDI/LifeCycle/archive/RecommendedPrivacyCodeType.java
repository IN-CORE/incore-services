//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.archive;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RecommendedPrivacyCodeType.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RecommendedPrivacyCodeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="public"/&gt;
 *     &lt;enumeration value="restricted"/&gt;
 *     &lt;enumeration value="private"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "RecommendedPrivacyCodeType")
@XmlEnum
public enum RecommendedPrivacyCodeType {


    /**
     * The object may be freely distributed within the constraints placed on the over all metadata availability.
     */
    @XmlEnumValue("public")
    PUBLIC("public"),

    /**
     * The distribution or access to the object is restricted. These restrictions may be tighter than the constraints placed on the over all metadata availability.
     */
    @XmlEnumValue("restricted")
    RESTRICTED("restricted"),

    /**
     * This information is private and at minimum access is restricted to the agency managing the metadata. Further restrictions may also apply.
     */
    @XmlEnumValue("private")
    PRIVATE("private");
    private final String value;

    RecommendedPrivacyCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RecommendedPrivacyCodeType fromValue(String v) {
        for (RecommendedPrivacyCodeType c : RecommendedPrivacyCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
