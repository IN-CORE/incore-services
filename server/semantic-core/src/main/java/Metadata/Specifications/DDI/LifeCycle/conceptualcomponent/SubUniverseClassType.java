//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.conceptualcomponent;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;
import Metadata.Specifications.DDI.LifeCycle.reusable.VersionableType;


/**
 * A sub-universe group provides a definition to the universes contained within it. For example the Sub-Universe Group of Gender for the Universe Resident Population may contain the Universe Males and the Universe Females. In addition to the standard name, label, and description, the SubUniverseClass references a concept which defines it, and references to the universes and or other sub-universe groups it contains. The contents of the SubUniverseClass may be designated as ordered.
 * <p>
 * <p>Java class for SubUniverseClassType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="SubUniverseClassType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:conceptualcomponent:3_2}SubUniverseClassName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:conceptualcomponent:3_2}DefiningConceptReference" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{ddi:reusable:3_2}UniverseReference"/&gt;
 *           &lt;element ref="{ddi:conceptualcomponent:3_2}SubUniverseClassReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="isOrdered" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SubUniverseClassType", propOrder = {
        "subUniverseClassName",
        "label",
        "description",
        "definingConceptReference",
        "universeReferenceOrSubUniverseClassReference"
})
public class SubUniverseClassType
        extends VersionableType {

    @XmlElement(name = "SubUniverseClassName")
    protected List<NameType> subUniverseClassName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected LabelType label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElement(name = "DefiningConceptReference")
    protected ReferenceType definingConceptReference;
    @XmlElementRefs({
            @XmlElementRef(name = "UniverseReference", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "SubUniverseClassReference", namespace = "ddi:conceptualcomponent:3_2", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<ReferenceType>> universeReferenceOrSubUniverseClassReference;
    @XmlAttribute(name = "isOrdered")
    protected Boolean isOrdered;

    /**
     * A name for the SubUniverseClass. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the subUniverseClassName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subUniverseClassName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubUniverseClassName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getSubUniverseClassName() {
        if (subUniverseClassName == null) {
            subUniverseClassName = new ArrayList<NameType>();
        }
        return this.subUniverseClassName;
    }

    /**
     * A display label for the SubUniverseClass. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.
     *
     * @return possible object is
     * {@link LabelType }
     */
    public LabelType getLabel() {
        return label;
    }

    /**
     * Sets the value of the label property.
     *
     * @param value allowed object is
     *              {@link LabelType }
     */
    public void setLabel(LabelType value) {
        this.label = value;
    }

    /**
     * A description of the content and purpose of the SubUniverseClass. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * A concept that provides a grouping factor for the universes contained by the SubUniverseClass. For example if the parent Universe is Population of the World and the two universes in the group are Male and Female the defining concept may be Sex.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getDefiningConceptReference() {
        return definingConceptReference;
    }

    /**
     * Sets the value of the definingConceptReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setDefiningConceptReference(ReferenceType value) {
        this.definingConceptReference = value;
    }

    /**
     * Gets the value of the universeReferenceOrSubUniverseClassReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the universeReferenceOrSubUniverseClassReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUniverseReferenceOrSubUniverseClassReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link ReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link ReferenceType }{@code >}
     */
    public List<JAXBElement<ReferenceType>> getUniverseReferenceOrSubUniverseClassReference() {
        if (universeReferenceOrSubUniverseClassReference == null) {
            universeReferenceOrSubUniverseClassReference = new ArrayList<JAXBElement<ReferenceType>>();
        }
        return this.universeReferenceOrSubUniverseClassReference;
    }

    /**
     * Gets the value of the isOrdered property.
     *
     * @return possible object is
     * {@link Boolean }
     */
    public boolean isIsOrdered() {
        if (isOrdered == null) {
            return false;
        } else {
            return isOrdered;
        }
    }

    /**
     * Sets the value of the isOrdered property.
     *
     * @param value allowed object is
     *              {@link Boolean }
     */
    public void setIsOrdered(Boolean value) {
        this.isOrdered = value;
    }

}
