//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.logicalproduct;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;

import Metadata.Specifications.DDI.LifeCycle.reusable.CodeRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.DateTimeRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ExternalCategoryRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.GeographicLocationCodeRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.GeographicStructureCodeRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.LabelType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NameType;
import Metadata.Specifications.DDI.LifeCycle.reusable.NumericRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.RepresentationReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.RepresentationType;
import Metadata.Specifications.DDI.LifeCycle.reusable.ScaleRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.SchemeReferenceType;
import Metadata.Specifications.DDI.LifeCycle.reusable.StructuredStringType;
import Metadata.Specifications.DDI.LifeCycle.reusable.TextRepresentationBaseType;
import Metadata.Specifications.DDI.LifeCycle.reusable.VersionableType;


/**
 * Describes a RepresentedVariable contained in the RepresentedVariableScheme. In addition to the standard name, label, and description a RepresentedVariable contains a reference to the Concept and Universe (or ConceptualVariable) as well as the representation of the RepresentedVariable. Representation may be provided in-line or by reference to a managed representation. RepresentedVariables are the core reusable parts of a Variable. RepresentedVariable maps to the GSIM Represented Variable. In addition to the standard name, label, and description
 * <p>
 * <p>Java class for RepresentedVariableType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="RepresentedVariableType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{ddi:reusable:3_2}VersionableType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:logicalproduct:3_2}RepresentedVariableName" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Label" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}Description" minOccurs="0"/&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{ddi:reusable:3_2}ConceptualVariableReference" minOccurs="0"/&gt;
 *           &lt;sequence&gt;
 *             &lt;element ref="{ddi:reusable:3_2}UniverseReference" minOccurs="0"/&gt;
 *             &lt;element ref="{ddi:reusable:3_2}ConceptReference" minOccurs="0"/&gt;
 *           &lt;/sequence&gt;
 *         &lt;/choice&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{ddi:reusable:3_2}CategorySchemeReference"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}ValueRepresentation"/&gt;
 *           &lt;element ref="{ddi:reusable:3_2}ValueRepresentationReference"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepresentedVariableType", propOrder = {
        "representedVariableName",
        "label",
        "description",
        "conceptualVariableReference",
        "universeReference",
        "conceptReference",
        "categorySchemeReference",
        "valueRepresentation",
        "valueRepresentationReference"
})
public class RepresentedVariableType
        extends VersionableType {

    @XmlElement(name = "RepresentedVariableName")
    protected List<NameType> representedVariableName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_2")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_2")
    protected StructuredStringType description;
    @XmlElement(name = "ConceptualVariableReference", namespace = "ddi:reusable:3_2")
    protected ReferenceType conceptualVariableReference;
    @XmlElement(name = "UniverseReference", namespace = "ddi:reusable:3_2")
    protected ReferenceType universeReference;
    @XmlElement(name = "ConceptReference", namespace = "ddi:reusable:3_2")
    protected ReferenceType conceptReference;
    @XmlElement(name = "CategorySchemeReference", namespace = "ddi:reusable:3_2")
    protected SchemeReferenceType categorySchemeReference;
    @XmlElementRef(name = "ValueRepresentation", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends RepresentationType> valueRepresentation;
    @XmlElementRef(name = "ValueRepresentationReference", namespace = "ddi:reusable:3_2", type = JAXBElement.class, required = false)
    protected JAXBElement<RepresentationReferenceType> valueRepresentationReference;

    /**
     * A name for the RepresentedVariable. May be expressed in multiple languages. Repeat the element to express names with different content, for example different names for different systems.Gets the value of the representedVariableName property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representedVariableName property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentedVariableName().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     */
    public List<NameType> getRepresentedVariableName() {
        if (representedVariableName == null) {
            representedVariableName = new ArrayList<NameType>();
        }
        return this.representedVariableName;
    }

    /**
     * A display label for the RepresentedVariable. May be expressed in multiple languages. Repeat for labels with different content, for example, labels with differing length limitations.Gets the value of the label property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * A description of the RepresentedVariable. May be expressed in multiple languages and supports the use of structured content.
     *
     * @return possible object is
     * {@link StructuredStringType }
     */
    public StructuredStringType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     *
     * @param value allowed object is
     *              {@link StructuredStringType }
     */
    public void setDescription(StructuredStringType value) {
        this.description = value;
    }

    /**
     * A reference to a ConceptualVariable which provides the linkage to the Universe and Concept used by this RepresentedVariable. TypeOfObject should be set to ConceptualVariable.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getConceptualVariableReference() {
        return conceptualVariableReference;
    }

    /**
     * Sets the value of the conceptualVariableReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setConceptualVariableReference(ReferenceType value) {
        this.conceptualVariableReference = value;
    }

    /**
     * Reference to the universe statement containing a description of the widest possible group of persons or other elements that this RepresentedVariable refers to, and to which any analytic results refer. TypeOfObject should be set to Universe.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getUniverseReference() {
        return universeReference;
    }

    /**
     * Sets the value of the universeReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setUniverseReference(ReferenceType value) {
        this.universeReference = value;
    }

    /**
     * Reference to the concept measured by this RepresentedVariable. TypeOfObject should be set to Concept.
     *
     * @return possible object is
     * {@link ReferenceType }
     */
    public ReferenceType getConceptReference() {
        return conceptReference;
    }

    /**
     * Sets the value of the conceptReference property.
     *
     * @param value allowed object is
     *              {@link ReferenceType }
     */
    public void setConceptReference(ReferenceType value) {
        this.conceptReference = value;
    }

    /**
     * Reference to a category scheme that contains the representation domain of the RepresentedVariable. Use this element when only the category specifications are provided. If both a code and the related category must be specified use CodeRepresentation (member of the substitution group ValueRepresentation). TypeOfObject should be set to CategoryScheme.
     *
     * @return possible object is
     * {@link SchemeReferenceType }
     */
    public SchemeReferenceType getCategorySchemeReference() {
        return categorySchemeReference;
    }

    /**
     * Sets the value of the categorySchemeReference property.
     *
     * @param value allowed object is
     *              {@link SchemeReferenceType }
     */
    public void setCategorySchemeReference(SchemeReferenceType value) {
        this.categorySchemeReference = value;
    }

    /**
     * Describes the actual representation of the RepresentedVariables' values. ValueRepresentation is the head of a substitution group which supports a number of representation types, i.e. CodeRepresentation, NumericRepresentation, TextRepresentation, DateTimeRepresentation, ScaleRepresentation, GeographicStructureCodeRepresentation, and GeographicLocationCodeRepresentation. Although the structure allows for specification of missing values these features should be used with caution. Like the definition of the universe and concept, the specification of the representation can be constrained by the Variable (the GSIM ImplementedVariable), for example a NumericRepresentation could be constrained with a lower top coding specification. Missing Values can be assigned separately by the Variable without impact on the ValueRepresentation of the specified valid values provided here.
     *
     * @return possible object is
     * {@link JAXBElement }{@code <}{@link GeographicStructureCodeRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link ScaleRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link TextRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link GeographicLocationCodeRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link CodeRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link ExternalCategoryRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link DateTimeRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link NumericRepresentationBaseType }{@code >}
     * {@link JAXBElement }{@code <}{@link RepresentationType }{@code >}
     */
    public JAXBElement<? extends RepresentationType> getValueRepresentation() {
        return valueRepresentation;
    }

    /**
     * Sets the value of the valueRepresentation property.
     *
     * @param value allowed object is
     *              {@link JAXBElement }{@code <}{@link GeographicStructureCodeRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link ScaleRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link TextRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link GeographicLocationCodeRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link CodeRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link ExternalCategoryRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link DateTimeRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link NumericRepresentationBaseType }{@code >}
     *              {@link JAXBElement }{@code <}{@link RepresentationType }{@code >}
     */
    public void setValueRepresentation(JAXBElement<? extends RepresentationType> value) {
        this.valueRepresentation = value;
    }

    /**
     * Allows for the use of managed value representations by reference. ValueRepresentationReference is the head of a substitution group which supports a number of representation types not managed within existing schemes, i.e. ManagedNumericRepresentation, ManagedTextRepresentation, ManagedDateTimeRepresentation, and ManagedScaleRepresentation. TypeOfObject should be set to ManagedNumericRepresentation, ManagedTextRepresentation, ManagedDateTimeRepresentation, or ManagedScaleRepresentation.
     *
     * @return possible object is
     * {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     */
    public JAXBElement<RepresentationReferenceType> getValueRepresentationReference() {
        return valueRepresentationReference;
    }

    /**
     * Sets the value of the valueRepresentationReference property.
     *
     * @param value allowed object is
     *              {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     *              {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     *              {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     *              {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     *              {@link JAXBElement }{@code <}{@link RepresentationReferenceType }{@code >}
     */
    public void setValueRepresentationReference(JAXBElement<RepresentationReferenceType> value) {
        this.valueRepresentationReference = value;
    }

}
