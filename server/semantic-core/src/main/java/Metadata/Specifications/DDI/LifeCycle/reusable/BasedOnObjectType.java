//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.04 at 03:10:13 PM CST 
//


package Metadata.Specifications.DDI.LifeCycle.reusable;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * Use when creating an object that is based on an existing object or objects that are managed by a different agency or when the new object is NOT simply a version change but you wish to maintain a reference to the object that served as a basis for the new object. BasedOnObject may contain references to any number of objects which serve as a basis for this object, a BasedOnRationalDescription of how the content of the referenced object was incorporated or altered, and a BasedOnRationalCode to allow for specific typing of the BasedOnReference according to an external controlled vocabulary.
 * <p>
 * <p>Java class for BasedOnObjectType complex type.
 * <p>
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;complexType name="BasedOnObjectType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{ddi:reusable:3_2}BasedOnReference" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}BasedOnRationaleDescription" minOccurs="0"/&gt;
 *         &lt;element ref="{ddi:reusable:3_2}BasedOnRationaleCode" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BasedOnObjectType", propOrder = {
        "basedOnReference",
        "basedOnRationaleDescription",
        "basedOnRationaleCode"
})
public class BasedOnObjectType {

    @XmlElement(name = "BasedOnReference")
    protected List<ReferenceType> basedOnReference;
    @XmlElement(name = "BasedOnRationaleDescription")
    protected InternationalStringType basedOnRationaleDescription;
    @XmlElement(name = "BasedOnRationaleCode")
    protected CodeValueType basedOnRationaleCode;

    /**
     * A reference to an object upon which the current object is based using a standard Reference structure. Repeat for multiple base objects. The TypeOfObject may be any Versionable or Maintainable object.Gets the value of the basedOnReference property.
     * <p>
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the basedOnReference property.
     * <p>
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBasedOnReference().add(newItem);
     * </pre>
     * <p>
     * <p>
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     */
    public List<ReferenceType> getBasedOnReference() {
        if (basedOnReference == null) {
            basedOnReference = new ArrayList<ReferenceType>();
        }
        return this.basedOnReference;
    }

    /**
     * Textual description of the rationale/purpose for the based on reference to inform users as to the extent and implication of the version change. May be expressed in multiple languages.
     *
     * @return possible object is
     * {@link InternationalStringType }
     */
    public InternationalStringType getBasedOnRationaleDescription() {
        return basedOnRationaleDescription;
    }

    /**
     * Sets the value of the basedOnRationaleDescription property.
     *
     * @param value allowed object is
     *              {@link InternationalStringType }
     */
    public void setBasedOnRationaleDescription(InternationalStringType value) {
        this.basedOnRationaleDescription = value;
    }

    /**
     * RationaleCode is primarily for internal processing flags within an organization or system. Supports the use of an external controlled vocabulary.
     *
     * @return possible object is
     * {@link CodeValueType }
     */
    public CodeValueType getBasedOnRationaleCode() {
        return basedOnRationaleCode;
    }

    /**
     * Sets the value of the basedOnRationaleCode property.
     *
     * @param value allowed object is
     *              {@link CodeValueType }
     */
    public void setBasedOnRationaleCode(CodeValueType value) {
        this.basedOnRationaleCode = value;
    }

}
