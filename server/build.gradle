apply plugin: 'java'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

//add dependencies for plugins needed to run the build
buildscript {
    repositories {
        maven { url 'http://download.osgeo.org/webdav/geotools/' }
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

//apply base plugins to the root, so we can run all the server
//webapps in a single gretty/jetty server
apply plugin: 'idea'

idea {
    module {
        jdkName = '1.8'
    }
}

//define repositories needed for all builds
//(this is different than the buildscript block.
//  The buildscript repositories are for RUNNING the build script,
//  This is for repositories needed to find dependencies of the projects)
repositories {
    maven { url 'http://download.osgeo.org/webdav/geotools/' }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "http://repo.boundlessgeo.com/main/" }
}


apply plugin: 'war'

if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
    project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
}

//a "farm" is the gretty term for multiple webapps that can be run
//in the same webapp service.
farm {
    webapp ':fragility-service'
    webapp ':data-service'
    webapp ':hazard-service'
    webapp ':maestro-service'
    webapp ':auth-service'
    webapp ':semantic-service'
}

task farmWars(dependsOn: war, type: Copy) {
    from('.') {
        include '**/*.war'
    }
    into('build')
}

//For now, all subprojects are java projects. Later this might change.
//Until then, give them all a basic java build
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'

    repositories {
        maven { url 'http://download.osgeo.org/webdav/geotools/' }
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://repo.boundlessgeo.com/main/" }
    }

    dependencies {
        compile "log4j:log4j:1.2.16"
        compile group: 'org.json', name: 'json', version: '20171018'

        // JUnit 5
        testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0')

        // Mocking Framework
        testCompile(group: 'org.mockito', name: 'mockito-core', version: '2.17.0')

        // Test Runtime
        testRuntime(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0')
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

//All of our service plugins have some common configuration.
// (war and gretty builds, some basic jersey and mongo dependencies, etc)
// Common configuration between them can be specified here like this.
["fragility-service", "data-service", "hazard-service", "maestro-service", "auth-service", "semantic-service"].each { name ->
    project(":$name") {

        apply plugin: 'war'
        if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
            project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
        }

        gretty {
            httpPort 8080
        }

        dependencies {
            //incore-common local subproject library
            compile project(':incore-common');
            compile project(':tools-common');

            //mongo
            compile('org.mongodb:mongo-java-driver:3.6.3')
            compile('org.mongodb.morphia:morphia:1.3.2')

            //geotools
            compile("org.geotools:gt-main:17.0")
            compile("org.geotools:gt-api:17.0")
            compile("org.geotools:gt-opengis:17.0")
            compile("org.geotools:gt-coverage:17.0")
            compile("org.geotools:gt-arcgrid:17.0")
            compile("org.geotools:gt-geotiff:17.0")
            compile("org.geotools:gt-geojson:17.0")
            compile("org.geotools:gt-shapefile:17.0")

            //misc other dependencies
            compile("javax.media:jai_core:1.1.3")
            compile('de.grundid.opendatalab:geojson-jackson:1.8')
            compile('org.jamel.dbf:dbf-reader:0.2.0')

            //base jersey and jackson
            compile('javax.ws.rs:javax.ws.rs-api:2.0.1')
            compile('org.glassfish.jersey.core:jersey-server:2.25.1')
            compile('org.glassfish.jersey.containers:jersey-container-servlet:2.25.1')
            compile('org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1')
            compile('org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1')
            compile(group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.13')
            compile(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.25.1')
            
            //Swagger
            compile(group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.13') {
                exclude group: 'javax.ws.rs'
                exclude module: 'javax.ws.rs-api'
            }

            // Libraries for testing jersey controller actions
            testCompile(group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: '2.25.1')
            testCompile(group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-servlet', version: '2.25.1')

            // Temporary requirement for optional junit dependency that should not be optional
            testCompileOnly(group: 'org.apiguardian', name: 'apiguardian-api', version: '1.0.0')
        }
    }
}
