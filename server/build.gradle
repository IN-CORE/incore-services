apply plugin: 'java'

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

//add dependencies for plugins needed to run the build
buildscript {
    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'org.gretty:gretty:3.0.3'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

//apply base plugins to the root, so we can run all the server
//webapps in a single gretty/jetty server
apply plugin: 'idea'

idea {
    module {
        jdkName = '11'
    }
}

//define repositories needed for all builds
//(this is different than the buildscript block.
//  The buildscript repositories are for RUNNING the build script,
//  This is for repositories needed to find dependencies of the projects)
repositories {
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}


apply plugin: 'war'

// This will not apply to the war files we build unless we put it within project loop
// at the end of this file. This is only for the docker build to pull a version
war {
    archiveVersion = '1.7.0'
}

apply plugin: 'org.gretty'

// if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
//     project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
// }

//a "farm" is the gretty term for multiple webapps that can be run
//in the same webapp service.
farm {
    webapp ':dfr3-service'
    webapp ':data-service'
    webapp ':hazard-service'
    webapp ':semantics-service'
    webapp ':space-service'
    webapp ':maestro-service'
}

task farmWars(dependsOn: war, type: Copy) {
    from('.') {
        include '**/*.war'
    }
    into('build')
}

//For now, all subprojects are java projects. Later this might change.
//Until then, give them all a basic java build
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'

    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        compile "log4j:log4j:1.2.17.norce"
        compile group: 'org.json', name: 'json', version: '20171018'

        // JUnit 5
        testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0')

        // Mocking Framework
        testCompile(group: 'org.mockito', name: 'mockito-core', version: '3.5.15')

        // Test Runtime
        testRuntime(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0')
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

//All of our service plugins have some common configuration.
// (war and gretty builds, some basic jersey and mongo dependencies, etc)
// Common configuration between them can be specified here like this.
["dfr3-service", "data-service", "hazard-service", "semantics-service", "space-service", "maestro-service"].each { name ->
    project(":$name") {

        apply plugin: 'war'

        apply plugin: 'org.gretty'
        // if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
        //     project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
        // }

        gretty {
            httpPort 8080
        }

        dependencies {
            //incore-common local subproject library
            compile project(':incore-common')
            compile project(':tools-common')

            //mongo
            compile('dev.morphia.morphia:morphia-core:2.1.3')

            //geotools
            def geotoolsVersion = '24.1'
            compile("org.geotools:gt-main:$geotoolsVersion")
            compile("org.geotools:gt-opengis:$geotoolsVersion")
            compile("org.geotools:gt-coverage:$geotoolsVersion")
            compile("org.geotools:gt-arcgrid:$geotoolsVersion")
            compile("org.geotools:gt-geotiff:$geotoolsVersion")
            compile("org.geotools:gt-geojson:$geotoolsVersion")
            compile("org.geotools:gt-shapefile:$geotoolsVersion")
            compile("org.geotools:gt-referencing:$geotoolsVersion")
            compile("org.geotools:gt-epsg-hsql:$geotoolsVersion")
            compile("org.geotools:gt-process-feature:$geotoolsVersion")
            compile("org.geotools:gt-geopkg:$geotoolsVersion")

            //misc other dependencies
            compile(group: 'javax.media', name: 'jai_core', version: '1.1.3')
            compile("com.sun.activation:javax.activation:1.2.0")
            compile('de.grundid.opendatalab:geojson-jackson:1.8')
            compile('org.jamel.dbf:dbf-reader:0.2.0')

            //base jersey and jackson
            compile('javax.ws.rs:javax.ws.rs-api:2.1.1')
            compile('org.glassfish.jersey.core:jersey-server:2.31')
            compile('org.glassfish.jersey.containers:jersey-container-servlet:2.31')
            compile('org.glassfish.jersey.media:jersey-media-json-jackson:2.31')
            compile('org.glassfish.jersey.media:jersey-media-json-jackson:2.31')
            compile(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.31')
            compile(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.31')

            compile(group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.13')

            // Libraries for testing jersey controller actions
            testCompile(group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: '2.31')
            testCompile(group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-servlet', version: '2.31')

            // Temporary requirement for optional junit dependency that should not be optional
            testCompileOnly(group: 'org.apiguardian', name: 'apiguardian-api', version: '1.0.0')
        }
    }
}
