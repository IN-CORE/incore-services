apply plugin: 'java'

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

//add dependencies for plugins needed to run the build
buildscript {
    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'org.gretty:gretty:4.0.3'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

//apply base plugins to the root, so we can run all the server
//webapps in a single gretty/jetty server
apply plugin: 'idea'

idea {
    module {
        jdkName = '11'
    }
}

//define repositories needed for all builds
//(this is different than the buildscript block.
//  The buildscript repositories are for RUNNING the build script,
//  This is for repositories needed to find dependencies of the projects)
repositories {
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}


apply plugin: 'war'

// This will not apply to the war files we build unless we put it within project loop
// at the end of this file. This is only for the docker build to pull a version
war {
    archiveVersion = '1.29.0'
}

apply plugin: 'org.gretty'

// if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
//     project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
// }

//a "farm" is the gretty term for multiple webapps that can be run
//in the same webapp service.
farm {
    webapp ':dfr3-service'
    webapp ':data-service'
    webapp ':hazard-service'
    webapp ':semantics-service'
    webapp ':space-service'
    webapp ':project-service'
}

task farmWars(dependsOn: war, type: Copy) {
    from('.') {
        include '**/*.war'
    }
    into('build')
}

//For now, all subprojects are java projects. Later this might change.
//Until then, give them all a basic java build
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'

    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "https://repo.osgeo.org/repository/Geoserver-releases/" }
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        implementation("log4j:log4j:1.2.17.norce")
        implementation("org.json:json:20171018")
        implementation("com.fasterxml.jackson.core:jackson-databind:2.18.2")

        // JUnit 5
        testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0')

        // Mocking Framework
        testImplementation(group: 'org.mockito', name: 'mockito-core', version: '3.5.15')

        // Test Runtime
        testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0')
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

//All of our service plugins have some common configuration.
// (war and gretty builds, some basic jersey and mongo dependencies, etc)
// Common configuration between them can be specified here like this.
["dfr3-service", "data-service", "hazard-service", "semantics-service", "space-service", "project-service"].each { name ->
    project(":$name") {

        apply plugin: 'war'

        apply plugin: 'org.gretty'
        // if (!project.plugins.findPlugin(org.akhikhl.gretty.GrettyPlugin)) {
        //     project.apply(plugin: org.akhikhl.gretty.GrettyPlugin)
        // }

        gretty {
            httpPort 8080
        }

        dependencies {
            //incore-common local subproject library
            implementation project(":incore-common")
            implementation project(":tools-common")

            //mongo
            implementation("dev.morphia.morphia:morphia-core:2.4.18")

            // versions
            def geotoolsVersion = '32.1'
            def jerseyVersion = '3.1.10'
            def swaggerVersion = '2.2.28'

            //geotools
            implementation("org.geotools:gt-main:$geotoolsVersion")
            implementation("org.geotools:gt-api:$geotoolsVersion")
            implementation("org.geotools:gt-coverage:$geotoolsVersion")
            implementation("org.geotools:gt-arcgrid:$geotoolsVersion")
            implementation("org.geotools:gt-geotiff:$geotoolsVersion")
            implementation("org.geotools:gt-geojson:$geotoolsVersion")
            implementation("org.geotools:gt-shapefile:$geotoolsVersion")
            implementation("org.geotools:gt-referencing:$geotoolsVersion")
            implementation("org.geotools:gt-epsg-hsql:$geotoolsVersion")
            implementation("org.geotools:gt-process-feature:$geotoolsVersion")
            implementation("org.geotools:gt-geopkg:$geotoolsVersion")
            implementation("org.geotools.jdbc:gt-jdbc-postgis:$geotoolsVersion")
            implementation("org.postgresql:postgresql:42.7.3")


            //misc other dependencies
            implementation("javax.media:jai_core:1.1.3")
            implementation("com.sun.activation:javax.activation:1.2.0")
            implementation("de.grundid.opendatalab:geojson-jackson:1.8")
            implementation("org.jamel.dbf:dbf-reader:0.2.0")
            implementation("org.dom4j:dom4j:2.1.3")

            //base jersey and jackson
            implementation("jakarta.ws.rs:jakarta.ws.rs-api:3.1.0")

            implementation("org.glassfish.jersey.core:jersey-server:$jerseyVersion")
            implementation("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion")
            implementation("org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion")
            implementation("org.glassfish.jersey.media:jersey-media-multipart:$jerseyVersion")
            implementation("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion")

            // Swagger dependencies
            implementation("io.swagger.core.v3:swagger-annotations:$swaggerVersion")
            implementation("io.swagger.core.v3:swagger-jaxrs2-jakarta:$swaggerVersion")
            implementation("io.swagger.core.v3:swagger-jaxrs2-servlet-initializer-jakarta:$swaggerVersion")
            //implementation("io.swagger.core.v3:swagger-jaxrs2:$swaggerVersion")

            // Libraries for testing jersey controller actions
            testImplementation("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion")
            testImplementation("org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:$jerseyVersion")

            // Temporary requirement for optional junit dependency that should not be optional
            testImplementation("org.apiguardian:apiguardian-api:1.0.0")
        }
    }
}

